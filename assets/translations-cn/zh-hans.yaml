about:
  downloadCLI:
    title: CLI 下载
  downloadImageList:
    title: 镜像列表
  os:
    linux: Linux
    mac: macOS
    windows: Windows
  title: About
  versions:
    cli: CLI
    component: 组件
    helm: Helm
    machine: Machine
    releaseNotes: 查看发布说明
    title: 版本
    version: 版本
##############################
# Components & Pages
##############################
accountAndKeys:
  account:
    change: 修改密码
    title: 账户
  apiKeys:
    add:
      customExpiry:
        options:
          day: 日
          hour: 小时
          minute: 分钟
          month: 月
          year: 年
      description:
        label: 描述
        placeholder: 可选择输入一个描述，以帮助您识别该API密钥。
      expiry:
        label: 自动过期
        options:
          custom: 自定义过期之间
          day: 一天后过期
          maximum: "{value} - 最大有效期"
          month: 一个月后过期
          never: 从不过期
          year: 一年后过期
      label: 创建API密钥
      noScope: 没有适用范围
      scope: 适用范围
    info:
      accessKey: Access Key
      bearerToken: Bearer Token
      bearerTokenTip: "Access Key 和 Secret Key 可以作为 HTTP Basic auth 的用户名和密码发送，以授权请求。您也可以将它们组合起来作为一个Bearer token使用。"
      keyCreated: 已创建一个新的API密钥。
      #accessKey: Access Key
      #secretKey: Secret Key
      #bearerToken: Bearer Token
      saveWarning: 请在云端或本地妥善保存以上的信息! 如果丢失这些信息，你需要创建一个新的API密钥。
      secretKey: Secret Key
      ttlLimitedWarning: 由于系统配置的原因，该API密钥的到期时间缩短了。
    notAllowed: 对不起，您没有权限编辑API密钥
    title: API密钥
  title: 账户和API密钥
action:
  activate: 激活
  clone: 克隆
  copy: 复制
  deactivate: 停用
  disable: 禁用
  download: 下载 YAML
  downloadFile: 下载文件
  edit: 编辑配置
  editYaml: 编辑 YAML
  enable: 启用
  hide: 隐藏
  openLogs: 查看日志
  refresh: 刷新
  remove: 删除
  show: 显示
  unassign: 取消分配
  view: 查看配置
  viewInApi: API 查看
addClusterMemberDialog:
  title: 添加集群成员
addProjectMemberDialog:
  title: 添加项目成员
###############################
### 高级设置
###############################
advancedSettings:
  descriptions:
    'auth-token-max-ttl-minutes': '自定义一个授权令牌的最大TTL（以分钟为单位）。'
    'auth-user-info-max-age-seconds': '在进行认证提供者组成员同步之前，用户认证令牌的最大存活时间。'
    'auth-user-info-resync-cron': '重新同步认证提供者组成员资格的默认cron时间表。'
    'auth-user-session-ttl-minutes': '用户认证会话的自定义TTL（以分钟为单位）。'
    'cacerts': '验证服务器的证书所需的CA证书。'
    'cluster-defaults': '在创建新集群时覆盖RKE默认值。'
    'cluster-template-enforcement': '非管理员将被限制只能通过预先批准的RKE模板启动集群。'
    'engine-install-url': '默认的Docker引擎安装URL（用于大多数节点驱动）。'
    'engine-iso-url': '默认的操作系统安装URL（用于vSphere驱动）。'
    'engine-newest-version': '在本次发布时，最新的Docker支持版本。 不满足支持的Docker范围但比这更新的Docker版本将被标记为未测试。'
    'engine-supported-range': '支持Docker引擎版本的Semver范围。 不符合这个范围的版本将在用户界面中被标记为不支持。'
    'harv-backup-target': 自定义备份目标用于存储VM备份。
    'harv-log-level': 配置Harvester服务器日志级别. 默认为信息。
    'harv-server-version': Harvester服务器版本。
    'harv-ui-index': 'UI的HTML索引。'
    'harv-ui-source': 配置如何加载UI资源。
    'harv-upgrade-checker-enabled': 指定是否启用Harvester升级检查. 默认为true。
    'harv-upgrade-checker-url': 默认的Harvester升级检查地址。 仅在<code> upgrade-checker-enabled </code> 等于true时使用。
    'harv-vlan': VLAN网络的默认NIC名称。
    'ingress-ip-domain': '用于自动生成Ingress主机名的通配符DNS域。<ingress-name>.<namespace-name>.<ingress controller的ip地址>将被添加到该域。'
    'rke-metadata-config': '配置RKE元数据刷新参数。'
    'server-url': '默认的{appName}安装网址。必须是HTTPS。你的集群中的所有节点都必须能够到达这里。'
    'system-default-registry': '用于所有系统Docker镜像的私有仓库。'
    'telemetry-opt': '遥测报告opt-in。'
    'ui-banners': '分类横幅是用来在页眉、页脚或两者中显示一个自定义的固定横幅。'
    'ui-default-landing': '用户在登录后登陆的默认页面。'
    'ui-index': 'UI的HTML索引。'
    'ui-issues': '使用一个URL地址来发送新的 "提交问题 "报告，而不是将用户发送到Github问题页面。'
    'ui-pl': 'Private-Label company name.'
    'ui-brand': 定义在 /assets/brand 中的替代主题的文件夹名称。
    'harv-additional-ca': '用于TLS验证的自定义CA根证书。'
    'harv-cluster-registration-url': 用于多集群管理的注册URL。
    'harv-http-proxy': '用于Harvester访问外部服务的HTTP代理。'
    'harv-overcommit-config': '资源超额配置。'
    'harv-support-bundle-timeout': '支持包超时配置（分钟），使用0禁用超时。'
    'harv-vip-pools': '按CIDR配置VIP全局和命名空间的IP地址池。'
    'harv-vm-force-reset-policy': '配置当虚拟机卡在停机的节点上时的强制重启动作。'
    'rdns-base-url': '配置 RDNS 服务地址。'
    'ui-session-logout-minutes': '用户超过配置时间没有任何操作将自动注销(以分钟为单位)。'
    'auditlog-server-url': '配置审计日志服务地址。'
    'none-operate-session-time': '用户超过配置时间没有任何操作将自动注销(以秒为单位)'
    'ui-footer-text': '额外的页脚内容'
    'ui-footer-url': '额外页脚内容对应的链接'
    'extra-menus': '配置扩展菜单'
    ui-dashboard-index: '{appName} UI HTML 首页地址。'
    'ui-offline-preferred': '控制 UI 静态资源是由服务器容器在本地提供还是从 ui-index 和 ui-dashboard-index 设置中定义的远程 URL 提供。'
  edit:
    changeSetting: "修改设置"
    falseOption: "False"
    invalidJSON: 无效的JSON - 请在保存前检查并修改您的输入。
    label: 编辑设置
    trueOption: "True"
    useDefault: 使用默认值
    value: 值
  editHelp:
    'ui-banners': 这个设置需要一个JSON对象，包含3个根参数；<code>banner</code>, <code>showHeader</code>, <code>showFooter</code>。<code>banner</code>是一个包含；<code>textColor</code>, <code>background</code>, 和<code>text</code>的对象，其中<code>textColor</code>和<code>background</code>是任何有效的CSS颜色值。
  enum:
    'har-log-level':
      debug: Debug
      info: Info
      trace: Trace
      #'ui-default-landing':
    'har-ui-source':
      auto: 'Auto'
      bundled: 'Bundled'
      external: 'External'
  hide: 隐藏
  label: 高级设置
  none: 无
  show: 显示
  subtext: 一般用户不需要改变这些。请谨慎操作，一旦输入了不正确的值，会破坏你的{appName}安装。从默认设置中定制的设置被标记为 "已修改"。
# ember: Cluster Manager
#vue: Cluster Explorer
#'telemetry-opt':
#prompt: Prompt
#in: Opt-in to Telemetry
#out: Opt-out of Telemetry

assignTo:
  labelsTitle: "{count, plural,\n  =1 { 分配集群到&hellip; }\n  other { 分配 {count}集群到&hellip; }\n}"
  title: "{count, plural,\n  =1 { 分配集群到&hellip; }\n  other { 分配 {count} 集群到&hellip; }\n}"
  workspace: 工作空间
asyncButton:
  activate:
    action: 激活
    success: 已激活
    waiting: 正在激活&hellip;
  apply:
    action: '应用'
    success: '已应用'
    waiting: '正在应用&hellip;'
  continue:
    action: '继续'
    success: '已保存'
    waiting: '正在保存&hellip;'
  copy:
    action: 单击复制
    success: 已复制
  create:
    action: '创建'
    success: '已创建'
    waiting: '正在创建&hellip;'
  deactivate:
    action: 停用
    success: 已停用
    waiting: 正在停用&hellip;
  default:
    action: 正在执行
    error: 错误
    success: 成功
    waiting: 等待中
  delete:
    action: '删除'
    success: '已删除'
    waiting: '正在删除&hellip;'
  disable:
    action: '禁用'
    success: '已禁用'
    waiting: '正在禁用&hellip;'
  done:
    action: '完成'
    success: '已保存'
    waiting: '正在保存&hellip;'
  download:
    action: '下载'
    success: '下载完成'
    waiting: '正在下载&hellip;'
  drain:
    action: 清空
    success: 已清空
    waiting: 正在清空&hellip;
  edit:
    action: 保存
    success: 已保存
    waiting: 正在保存&hellip;
  enable:
    action: '启用'
    success: '已启用'
    waiting: '正在启用&hellip;'
  finish:
    action: '完成'
    success: '已完成'
    waiting: '正在处理中&hellip;'
  import:
    action: 导入
    success: 已导入
    waiting: 正在导入&hellip;
  install:
    action: '安装'
    success: '安装完成'
    waiting: '开始安装&hellip;'
  refresh:
    action: ""
    actionIcon: '刷新'
    error: ""
    errorIcon: '出错啦'
    success: ""
    successIcon: '成功'
    waiting: ""
    waitingIcon: '刷新中'
  remove:
    action: 移除
    success: 已移除
    waiting: 正在移除&hellip;
  restore:
    action: Restore
    success: Restored
    waiting: Restoring&hellip;
  rollback:
    action: Roll Back
    success: Rolled Back
    waiting: Rolling Back Workload
  rotate:
    action: Rotate
    success: Rotated
    waiting: Rotating&hellip;
  snapshot:
    action: Snapshot Now
    success: Snapshot Creating
    waiting: Snapshotting&hellip;
  uninstall:
    action: Uninstall
    success: Uninstalled
    waiting: Uninstalling&hellip;
  update:
    action: Update
    success: Updated
    waiting: Updating&hellip;
  upgrade:
    action: 升级
    success: 完成升级
    waiting: 已开始升级&hellip;
authConfig:
  accessMode:
    label: '配置够登录和使用{vendor}的人员名单'
    required: '只有授权用户和用户组能够访问。'
    restricted: '允许集群和项目的成员，以及授权用户和用户组访问'
    unrestricted: '允许所有用户访问'
  allowedPrincipalIds:
    title: 授权用户和用户组
  associatedWarning: '注意：您认证为的{provider} 用户将作为您当前登录的 {vendor} 用户的替代登录方式(<code>{username}</code>)。'
  azuread:
    applicationId: 应用ID
    authEndpoint: Auth Endpoint
    endpoint: 端点
    #graphEndpoint: Graph Endpoint
    #tokenEndpoint: Token Endpoint
    #authEndpoint: Auth Endpoint

    graphEndpoint: Graph Endpoint
    tenantId: 租户ID
    tokenEndpoint: Token Endpoint
  cas:
    callbackURL:
      label: 服务回调 URL
      placeholder: CAS 服务回调 URL
    cas: 配置 Rancher 使用 CAS 进行认证
    connectionTimeout:
      label: 服务器连接超时
      placeholder: 例如：5000
    enableTLS: Use a secure connection
    hostUrl:
      label: CAS Host
      placeholder: 例如：cas-server.com
    loginEndpoint:
      label: 登录 Endpoint
      placeholder: 例如：/cas/login
    logoutEndpoint:
      label: 登出 Endpoint
      placeholder: 例如：/cas/logout
    passwordField:
      label: 密码字段
      placeholder: 例如：password
    port:
      label: 端口
      placeholder: 例如：6379
    usernameField:
      label: 用户名字段
      placeholder: 例如：username
  github:
    clientId:
      label: 账户名
    clientSecret:
      label: 密码
    form:
      app:
        label: 应用名称
        value: '输入一个应用名称，例如：我的{vendor}'
      calllback:
        label: 授权回调URL
      description:
        label: 应用描述
        value: '选填项，可留空'
      homepage:
        label: 主页URL地址
      instruction: '请在表格中输入以下值：'
      prefix: |-
        <li><a href="{baseUrl}/settings/developers" target="_blank" rel="noopener noreferrer nofollow">点击这里</a>，在新窗口中进入GitHub应用设置。</li>
        <li>点击 "OAuth App "标签。</li>
        <li>点击 "新建OAuth应用 "按钮。</li>
      suffix: |-
        <li>点击 "注册应用"</li>
        <li>复制并粘贴新创建的OAuth应用程序的客户ID和客户秘密到下面的字段中。</li>
    host:
      label: GitHub企业版
      placeholder: 例如：github.mycompany.example
    table:
    #server: Server
    #clientId: Client ID

    target:
      label: 您想使用哪种GitHub呢？
      private: GitHub企业版的私人安装
      public: 公开的GitHub.com
  googleoauth:
    adminEmail: 电子邮件地址
    domain: 域名
    oauthCredentials:
      label: OAuth 认证信息
      tip: 包含OAuth Credentials的JSON文件可以在Google API开发者控制台中找到。
    serviceAccountCredentials:
      label: Service Account 认证信息
      tip: 包含Service Account 认证信息的JSON文件可以在Google API开发者控制台中找到。
    steps:
      "1":
        body:
          "1": 登录到您的账户，然后导航到 "APIs & Services"，然后选择 "OAuth consent screen"。
          "2": "Authorized domains:"
          "3": "Application homepage link: "
          "4": '在Google APIs的作用域下，启用 "email"、"profile "和 "openid"。'
          "5": '单击保存，保存以上修改'
        title: '第一步：对于标准的Google，点击<a href="https://console.developers.google.com/apis/credentials" target="_blank" rel="noopener noreferrer nofollow">这里</a>在新窗口中进入应用程序设置。'
        topPrivateDomain: '顶级域'
      "2":
        body:
          "1": '选择 "Create Credentials"下拉菜单，选择 "OAuth clientID"，然后选择 "Web application"。'
          "2": "Authorized Javascript origins:"
          "3": "Authorized redirect URIs:"
          "4": '点击 "Create"，然后点击 "Download JSON"按钮。'
          "5": '在OAuth凭证框中上传下载的JSON文件。'
        title: '第二步：导航到 "Credentials"标签，创建你的OAuth客户端ID。'
      "3":
        body:
          "1": 创建一个 service account。
          "2": 为这个service account生成密钥。
          "3": 在你的google域名中添加service account作为OAuth客户端。
        introduction: "按照<a href=\"{docsBase}/admin-settings/authentication/google/#creating-service-account-credentials\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">这里</a>指南。"
        title: '第三步：创建服务账户凭证'
  ldap:
    activedirectory: 配置 Active Directory 账户
    cert: 证书
    customizeSchema: 自定义模式
    defaultLoginDomain:
      hint: 如果用户在没有指定域的情况下登录，将使用该域。
      label: 默认登录页面的域名
      placeholder: 例如：mycompany
    disabledStatusBitmask: 禁用状态 比特掩码
    freeipa: 配置 FreeIPA server
    groupDNAttribute: 用户组域名属性
    groupMemberMappingAttribute: 用户组成员映射属性
    groupMemberUserAttribute: 用户组成员属性
    groupSearchBase:
      label: 用户组内搜索
      #placeholder: 'ou=groups,dc=mycompany,dc=com'

      placeholder: ou=groups,dc=mycompany,dc=com
    groups: 组
    hostname: 主机名/IP
    loginAttribute: 登录属性
    nameAttribute: 名称属性
    nestedGroupMembership:
      label: 属于多个用户组的用户
      options:
        direct: 搜索只属于单个用户组的用户
        nested: 搜索只属于单个用户组的用户和属于多个用户组的用户
    objectClass: 对象类
    openldap: 配置 OpenLDAP server
    password: 密码
    port: 端口
    searchAttribute: 搜索属性
    searchFilter: 搜索过滤条件
    serverConnectionTimeout: 服务器连接超时
    serviceAccountDN: 服务账户的独特名称
    serviceAccountInfo: Rancher需要一个对所有能够登录的域都有只读访问权的服务账户，这样我们就可以在用户使用API密钥进行请求时，确定用户是什么组的成员。
    serviceAccountPassword: Service Account 密码
    starttls:
      label: Start TLS
      tip: 通过在连接过程中使用 TLS 封装来升级非加密连接。不能与TLS结合使用。
    table:
      clientId: Client ID
      server: Server
    tls: TLS
    userEnabledAttribute: 用户启用属性
    userMemberAttribute: 用户组员属性
    userSearchBase:
      label: 搜索用户
      placeholder: '例如：ou=users,dc=mycompany,dc=com'
    username: 用户名
    usernameAttribute: 用户名属性
    users: 用户
    userUniqueIdAttribute:
      label: 用户唯一标识
      tip: 请使用用户创建后全局唯一的用户属性，避免因该属性值变化导致用户权限丢失
    groupUniqueIdAttribute:
      label: 组唯一标识
      tip: 请使用用户组创建后全局唯一的属性，避免因该属性值变化导致用户权限丢失
  localEnabled: "{vendor} 被配置为允许访问其本地数据库中的账户。"
  manageLocal: 管理账户
  noneEnabled: 本地认证总是被启用，但你可以从下面显示的认证提供者中选择另一个额外的认证提供者。
  oidc:
    authEndpoint: Auth Endpoint
    cert:
      label: Certificate
      placeholder: Paste in the certificate, starting with -----BEGIN CERTIFICATE-----
    clientId: Client ID
    clientSecret: Client Secret
    customEndpoint:
      custom: Specify
      label: Endpoints
      standard: Generate
    issuer: Issuer
    key:
      label: Private Key
      placeholder: Paste in the private key, typically starting with -----BEGIN RSA PRIVATE KEY-----
    keycloak:
      realm: Keycloak Realm
      url: Keycloak URL
    keycloakoidc: 配置一个 Keycloak OIDC 账户
    oidc: 配置一个 OIDC 账户
    rancherUrl: Rancher URL
  saml:
    UID: UID字段
    adfs: 配置AD FS 账户
    api: Rancher API Host
    cert:
      label: 证书
      placeholder: 粘贴证书，以-----BEGIN CERTIFICATE----- 开始。
    displayName: 显示名称字段
    entityID: Entity ID字段
    groups: 用户组字段
    key:
      label: 私钥
      placeholder: 粘贴私钥，一般以-----RSA PRIVATE KEY----- 开始。
    keycloak: 配置Keycloak账户
    metadata:
      label: Metadata XML
      placeholder: 粘贴IDP Metadata XML
    okta: 配置Okta账户
    ping: 配置Ping账户
    shibboleth: 配置shibboleth账户
    showLdap: 配置OpenLDAP服务器
    userName: 用户名字段
  stateBanner:
    disabled: '已禁用{provider} 。'
    enabled: '已启用{provider} 。'
  testAndEnable: 测试和启用认证
authGroups:
  actions:
    assignRoles: 为当前用户组成员分配全局角色
    refresh: 刷新用户组成员名单
  assignEdit:
    assignTitle: 为当前用户组分配全局角色
backupRestoreOperator:
  backupFilename: 备份文件名称
  deleteTimeout:
    label: 删除超时
    tip: 在删除定标器强制删除之前，等待资源删除成功的秒数。
  deployment:
    rancherNamespace: Rancher 资源集命名空间
    size: 大小
    storage:
      label: 默认存储位置
      options:
        defaultStorageClass: '使用({name})作为默认存储类'
        none: 不使用默认存储类
        pickPV: 使用已有的持久卷
        pickSC: 使用已有的存储类
        s3: 使用Amazon S3对象存储服务
      persistentVolume:
        label: 持久存储卷
      storageClass:
        label: 存储类
      tip: '配置一个默认保存所有备份的存储位置。您可以选择对每个备份进行覆盖，但仅限于使用与 S3 兼容的对象存储。'
      warning: '此 {type} 没有将其回收策略设置为 "保留"。 如果卷被更改或未绑定，您的备份可能会丢失。'
  encryption: '加密'
  encryptionConfigName:
    backuptip: '<code>cattle-resource-system</code>命名空间中具有<code>encryption-provider-config.yaml</code>密钥的任何秘密。<br/>此文件的内容是从此备份中执行还原所必需的，Rancher Backup 不会存储这些内容。'
    label: 加密配置密钥
    options:
      none: 存储未加密的备份内容。
      secret: "使用 <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/#understanding-the-encryption-at-rest-configuration\">加密配置秘密</a>（推荐）对备份进行加密。"
    restoretip: '如果备份是在启用加密的情况下进行的，则应在还原过程中使用包含相同加密提供者配置的秘密。'
    warning: '该文件的内容是从该备份中执行还原所必需的，Rancher 备份不会存储。'
  lastBackup: 上一次备份
  nextBackup: 下一次备份
  noResourceSet: 您必须在此命名空间中定义一个资源集来创建备份CR。
  prune:
    label: 修剪
    tip: 删除备份中不存在的 Rancher 管理的资源。(推荐使用)
  resourceSetName: 资源集
  restoreFrom:
    default: 使用默认的存储目标恢复
    existing: 使用已有的备份配置恢复
    s3: 使用一个 S3 兼容的对象存储恢复
  retentionCount:
    label: 备份保留数量
    units: "{count, plural,\n  =1 { 文件 }\n  other { 文件 }\n}"
  s3:
    bucketName: 桶名称
    credentialSecretName: 密钥凭证
    endpoint: 端点
    endpointCA: 端点 CA
    folder: 文件夹
    insecureTLSSkipVerify: 跳过TLS认证
    region: 区域
    storageLocation: 存储位置
    titles:
      backupLocation: 备份来源
      location: 存储位置
      s3: S3
  schedule:
    label: 定时备份策略
    options:
      disabled: 单次备份
      enabled: 重复备份
    placeholder: 例如：@midnight or 0 0 * * *
  storageSource:
    configureS3: 使用兼容 S3 的对象存储作为存储位置
    useBackup: 使用备份 CR 上指定的 S3 位置
    useDefault: 使用安装时配置的默认存储位置
  targetBackup: 目标备份
catalog:
  app:
    managed: 管理
    section:
      notes: 发布说明
      readme: Chart 自述
      resources: 资源
      values: YAML
  chart:
    errors:
      clusterToolExists: 这个 chart 有一个固定的命名空间和名称。已经找到了一个匹配的<a href="{url}">应用程序</a>，任何变化都将在它上面进行。
    header:
      charts: Charts
    info:
      appVersion: Application Version
      chartUrls: Chart
      chartVersions:
        label: Chart Versions
        showLess: Show Less
        showMore: Show More
      home: Home
      keywords: Keywords
      maintainers: Maintainers
      related: Related
  charts:
    all: 所有
    categories:
      all: 所有类别
    certified:
      other: Other
      partner: Partner
      rancher: "{vendor}"
    header: Chart Apps
    noCharts: '没有可用的 chart，你有添加 chart 仓库吗？'
    noWindows: 您的应用商店没有包含能部署在 Windows 集群上的 chart。
    search: 过滤
  install:
    action:
      goToUpgrade: 编辑/升级
      ignoreWarning: 忽略警告，继续升级
    appReadmeGeneric: 此 chart 没有针对 rancher 的自述文件。查看 Helm 自述文件，了解更多可用配置选项及其用法。
    appReadmeMissing: 这个 chart 没有任何额外的 chart 信息。
    appReadmeTitle: Chart 信息 (Helm README)
    chart: Chart
    error:
      insufficientCpu: '这个Chart需要{need, number}个CPU核，但集群只有{have, number}个可用。'
      insufficientMemory: '这个Chart需要{need}的内存，但集群只有{have}可用。'
      requiresFound: '必须先安装<a href="{url}">${name}</a>，才能安装这个Chart。'
      requiresMissing: '这个Chart需要另一个提供{name}的Chart，但没有找到。'
    header:
      install: '安装 {name}'
      installGeneric: 安装 Chart
      upgrade: '升级 {name}'
    helm:
      atomic: Atomic
      #atomic: Atomic
      cleanupOnFail: 失败时的清理
      crds: 应用自定义资源定义
      description:
        label: 描述
        placeholder: 例如：Purpose of helm command
      dryRun: 空运行
      force: 强制
      historyMax:
        label: 保留最后一个
        unit: "{value, plural,\n  =1 { 版本 }\n  other { 版本 }\n}"
      hooks: 执行 chart 钩子
      openapi: 验证 OpenAPI 模式
      resetValues: 重置值
      timeout:
        label: 超时
        unit: "{value, plural,\n  =1 { 秒 }\n  other { 秒 }\n}"
      wait: 等待
    namespaceIsInProject: "这个Chart的目标命名空间<code>{namespace}</code>，已经存在，不能添加到不同的项目中。"
    project: 安装到项目
    section:
      appReadme: 自述
      chartOptions: Chart 配置选项
      diff: 比较变化
      helm: Helm 部署选项
      readme: Helm 自述
      valuesYaml: 编辑 YAML
    slideIn:
      dock: Dock to bottom
    steps:
      basics:
        description: 这个过程将有助于 {action, select, install { 创建 } upgrade { 升级 } update { 更新 } } 这个 {existing, select, true { 应用 } false { chart } }. 首先设置{vendor}用来管理应用的基本信息.
        label: 基本信息
        subtext: 设置应用基本信息
      helmCli:
        checkbox: 在安装前自定义Helm选项
        label: Helm选项
    version: 版本
    versions:
      current: "{ver} (current)"
      linux: "{ver} (Linux-only)"
      windows: "{ver} (Windows-only)"
  operation:
    tableHeaders:
      #action: Action
      releaseName: 版本名称
      releaseNamespace: 版本命名空间
  repo:
    action:
      refresh: 刷新
    #all: All
    gitBranch:
      label: Git 分支
      placeholder: 例如：master
    gitRepo:
      label: Git Repo URL
      placeholder: '例如：https://github.com/your-company/charts.git'
    name:
      rancher-charts: Rancher
      rancher-partner-charts: Partners
    target:
      git: 包含定义了 Helm chart 的 Git 仓库。
      http: 指向 Helm 生成的索引 http(s) URL
      label: 目标类型
    url:
      label: Index URL
      placeholder: '例如：https://charts.rancher.io'
    tls:
      insecureSkipTLSVerify: 跳过证书验证
  tools:
    action:
      edit: 编辑
      install: 安装
      remove: 移除
      upgrade: 升级
    header: 集群工具
changePassword:
  cancel: 取消
  changeOnLogin:
    label: 首次登陆账户时，要求用户立即修改密码。
  currentPassword:
    label: 当前在使用的密码
  deleteKeys:
    label: 删除所有的API密钥
  errors:
    failedDeleteKey: 无法删除单个API密钥
    failedDeleteKeys: 无法删除多个API密钥
    failedToChange: 无法修改密码
    missmatchedPassword: 前后两次输入的密码不匹配
    strengthError: 密码强度弱
  generatePassword:
    label: 为用户生成随机密码
  newGeneratedPassword: 推荐密码
  randomGen:
    generated:
      label: 为用户生成随机密码
  strength:
    best: 强
    good: 中
    label: 密码强度
    tooltip1: 密码必须至少包含 {length} 个字符
    tooltip2: 至少包括数字、大写字母、小写字母、符号中的两个类型
    weak: 弱
  title: 修改密码
  userGen:
    confirmPassword:
      label: 确认新密码
    newPassword:
      label: 新密码
chartHeading:
  overview: 概述
  #poweredBy: "Powered by:"
cruRegistry:
  title:
    new: 添加镜像库凭证
    edit: '编辑镜像库凭证: {name}'
    view: '镜像库凭证: {name}'
  address:
    label: 地址
    dockerhub: DockerHub
    quay: 'Quay.io'
    custom: 自定义
    harbor: Harbor
    globalRegistry: 全局镜像库
    placeholder: '例如: registry.example.com'
    artifactory: Artifactory
  multiple: 多个
  auth:
    label: 认证 Token
    saved: 已保存
  username:
    label: 用户名
  password:
    label: 密码
    saved: 已保存
cis:
  addTest: 添加测试 ID
  alertNeeded: "Alerting must be enabled within the CIS chart questions.yaml. This requires that <a tabindex=\"0\" aria-label=\"Link to Rancher's Monitoring\" href=\"{link}\"> Rancher's Monitoring and Alerting app</a> is installed and the Receivers and Routes are <a target=\"_blank\" rel='noopener nofollow' href='{docsBase}/monitoring-alerting/configuration/#alertmanager-configuration'> configured to send out alerts.</a>"
  alertOnComplete: 扫描完成告警
  alertOnFailure: 扫描失败告警
  benchmarkVersion: Benchmark 版本
  clusterProvider: 提供集群的厂商
  cronSchedule:
    label: 定时调度
    placeholder: "例如：0 * * * *"
  customConfigMap: 自定义 Benchmark 配置映射
  deleteBenchmarkWarning: "{count, plural,\n  =1 { 任何使用该基准版本的配置文件将不再工作。 }\n  other { 任何使用这些基准版本的配置文件将不再工作。 }\n}"
  deleteProfileWarning: "{count, plural,\n  =1 { 任何使用此配置文件的定时扫描将会失效。 }\n  other { 任何使用这些配置文件的定时扫描将会失效。 }\n}"
  downloadAllReports: 下载所有保存的报告
  downloadLatestReport: 下载最新报告
  downloadReport: 下载报告
  maxKubernetesVersion: 允许的最大 Kubernetes 版本
  minKubernetesVersion: 允许的最小 Kubernetes 版本
  noProfiles: 此集群类型没有有效的 ClusterScanProfiles 可供选择。
  noReportFound: 未找到扫描报告
  profile: 配置文件
  reports: 报告
  retention: 保留数
  scan:
    description: 描述
    fail: 失败
    lastScanTime: 最后扫描时间
    notApplicable: 'N/A'
    number: 序号
    pass: 通过
    remediation: 补救
    scanDate: 扫描日期
    scanReport: 扫描报告
    skip: 跳过
    total: 总共
    warn: 警告
  scheduling:
    disable: 运行单次扫描
    enable: 定时运行扫描
  scoreWarning:
    label: 扫描结果为 "warn" 状态
    protip: 没有失败的扫描将被默认标记为 “通过”，即使一些测试生成 “warn” 输出。此行为可以通过从本节中选择 “fail” 选项来更改。
  testID: Test ID
  testsSkipped: 已跳过的测试
  testsToSkip: 跳过测试
cluster:
  credential:
    aws:
      accessKey:
        label: Access Key
        placeholder: 请输入您的 AWS Access Key
      defaultRegion:
        help: 创建集群时默认使用的区域。 也用于验证此凭证是否有效。
        label: 默认区域
      secretKey:
        label: SecretKey
        placeholder: 请输入您的 AWS Secret Key
    digitalocean:
      accessToken:
        help: 从 DigitalOcean <a href="https://cloud.digitalocean.com/settings/api/tokens" target="_blank" rel="noopener noreferrer nofollow">Applications & API</a>中复制和粘贴个人访问令牌。
        #label: Access Token
        placeholder: 请输入您的 DigitalOcean API Access Token
    harvester:
      cluster: 集群
      cpu: CPUs
      disk: 磁盘
      external: 外部的 Harvester
      image: 镜像
      import: 导入的 Harvester
      kubeconfigContent:
        label: Kubeconfig 文件
      memory: 内存
      namespace: 命名空间
      network: 网络
      networkData:
        label: 网络配置模板
        title: "网络数据:"
      placeholder: 命名空间/名称
      sshUser: SSH 用户名
      userData:
        label: 用户配置模板
        title: "用户数据:"
    label: 云凭证
    name:
      label: 凭证名称
      placeholder: 请为这个凭证输入一个名称
    banner:
      createCredential: |-
        {length, plural,
          =0 {首先，你需要创建一个凭证来与云计算供应商对话}
          other {好的，让我们创建一个新的凭证}
        }
    select:
      option:
        new: 创建新的...
        none: 选择一个凭证...
    selectExisting:
      label: 选择已有
  description:
    label: 集群描述
    placeholder: （选填项）请输入关于该集群的描述
  import: 导入已有集群
  kubernetesVersion:
    label: Kubernetes 版本
  machinePool:
    name:
      label: 节点池名称
      placeholder: 默认情况下会随机生成一个节点池名称
    nodeTotals:
      label:
        controlPlane: "{count} 个Control Plane节点"
        etcd: "{count} 个etcd节点"
        worker: "{count} 个Worker节点"
      tooltip:
        controlPlane: "{count, plural,\n  =0 { 每个集群至少需要一个control plane节点才可以使用。 }\n  =1 { 只有一个control plane节点的集群是不具备容错能力的。 }\n  other {}\n}"
        etcd: "{count, plural,\n  =0 { 一个集群至少需要一个etcd节点才能使用，请重新选择节点数量。 }\n  =1 { 只有1个etcd节点的集群是不具备容错能力的。 }\n  =2 { 集群的节点数应该是奇数。 具有2个etcd节点的集群是不具备容错能力的。 }\n  =3 {}\n  =4 { 集群内的节点数量应该为任意大于1的奇数，请重新选择节点数量。 }\n  =5 {}\n  =6 { 集群内的节点数量应该为任意大于1的奇数，请重新选择节点数量。 }\n  =7 {}\n  other { 我们不建议您在集群内创建多于7个节点。 }\n}"
        worker: "{count, plural,\n  =0 { 每个集群至少需要一个worker节点才可以使用 }\n  =1 { 只有一个worker节点的集群是不具备容错能力的。 }\n  other {}\n}"
    labels:
      label: Kubernetes节点标签
    quantity:
      label: 节点数量
    role:
      label: 角色
  name:
    label: 集群名称
    placeholder: 请输入集群名称，该名称不能与其他集群名称相同
  provider:
    #aliyun: Alibaba ACK
    #aliyunecs: Aliyun ECS
    aws: Amazon AWS
    #amazonec2: Amazon EC2
    #amazoneks: Amazon EKS
    #azure: Azure
    #azureaks: Azure AKS
    #baidu: Baidu CCE
    #cloudca: Cloud.ca
    custom: 自定义
    #digitalocean: DigitalOcean
    #docker: Docker
    #exoscale: Exoscale
    #googlegke: Google GKE
    #huaweicce: Huawei CCE
    import: 导入已有集群
    #k3s: K3s
    #kubeAdmin: KubeADM
    #linode: Linode
    local: Local
    #minikube: Minikube
    #oci: Oracle Cloud Infrastructure
    #openstack: OpenStack
    #oracleoke: Oracle OKE
    #otc: Open Telekom Cloud
    other: 其他
    #packet: Packet
    pinganyunecs: 平安云 ECS
    #rackspace: RackSpace
    #rancherkubernetesengine: RKE
    #rke2: RKE Government
    #rke: RKE
    #rkeWindows: Windows
    #softlayer: SoftLayer
    #tencenttke: Tencent TKE
    #upcloud: UpCloud
    #vmwarevsphere: vSphere
    #zstack: ZStack
  providerGroup:
    create-custom: 在现有的节点上使用 RKE 创建集群
    create-kontainer: 在托管的 Kubernetes 提供商中创建集群
    create-machine: 在新建的节点上使用 RKE 创建集群
    create-template: 使用模板创建集群
    register-custom: 导入 Kubernetes 集群
    register-kontainer: 在托管的 Kubernetes 提供商中注册一个现有的集群
    create-custom1: 在现有的节点上使用 RKE 创建集群
    create-custom2: 在现有的节点上使用 RKE2/k3s 创建集群
    create-rke1: 在新的节点使用RKE创建一个集群
    create-rke2: 在新的节点使用RKE2/K3s创建一个集群
  addOns:
    additionalManifest:
      title: 补充声明文件
      tooltip: '集群启动时将会应用Kubernetes补充声明YAML.'
  addonChart:
    rancher-vsphere-cpi: vSphere CPI配置
    rancher-vsphere-csi: vSphere CSI配置
    rke2-calico: Calico配置
    rke2-calico-crd: Calico配置
    rke2-canal: Canal配置
    rke2-cilium: Cilium配置
    rke2-coredns: CoreDNS配置
    rke2-ingress-nginx: NGINX Ingress配置
    rke2-kube-proxy: Kube Proxy配置
    rke2-metrics-server: Metrics Server配置
    rke2-multus: Multus配置
  advanced:
    agentArgs:
      label: 如果内核参数与预期的kubelet默认值不同，则抛出错误
    argInfo:
      machineSelector:
        bannerLabel: '注意: 优先匹配最后一个的选择器, 并且只使用它的参数. 其他匹配的选择器的参数不会结合在一起或合并。'
        kubeApiServerTitle: 附加API服务器参数
        kubeControllerManagerTitle: 附加Controller管理参数
        kubeSchedulerTitle: 附加Scheduler参数
        label: 添加节点选择器
        listLabel: 添加参数
        subTitle: '使用Kubelet参数:'
        title: '对于匹配标签的机器:'
        titleAlt: '对所有节点使用Kubelet参数:'
      title: 附加Kubelet参数
  agentEnvVars:
    detail: 向agent容器添加额外的环境变量. 这在配置HTTP代理时是最常用的.
    keyLabel: 变量名
    label: Agent环境
  harvester:
    importNotice: 导入Harvester集群通过
    machinePool:
      cpu:
        placeholder: '例如: 2'
      disk:
        placeholder: '例如: 4'
      image:
        placeholder: 请选择镜像
      memory:
        placeholder: '例如: 4'
      namespace:
        placeholder: '例如: default'
      network:
        placeholder: 请选择网络
      sshUser:
        placeholder: '例如: ubuntu'
        toolTip: 登录选中的操作系统镜像的SSH用户名.
    registration:
      step1: "1. 前往目标Harvester UI的设置页面."
      step2: '2. 找到<code>cluster-registration-url</code>设置并点击<code><i class="icon icon-actions doc-icon" ></i></code> -> <code>编辑设置</code>按钮.'
      step3: "3. 输入下面的注册URL并点击<code>保存</code>."
      step4: "注册URL"
    warning:
      label: 这是Harvester集群 - 启用Harvester特性以管理
      state: 警告
  importAction: 导入已有集群
  legacyWarning: 旧版功能标志已启用，在Kubernetes 1.21+中，并不支持所有的旧版功能。
  memberRoles:
    addClusterMember:
      labelAdd: 添加成员
      labelSelect: 选择成员
      noResults: 没有匹配的结果
      placeholder: 搜索成员以提供集群访问权限
      searchPlaceholder: 请输入搜索
    removeMessage: '注意: 删除一个用户不会删除其项目权限'
  privateRegistry:
    mode:
      advanced: 配置高级containerd镜像和镜像仓库认证选项
      private: 从私有镜像仓库中为{vendor}拉取镜像
      public: 从公共DockerHub中为{vendor}拉取镜像
    systemDefaultRegistry:
      label: Rancher镜像的镜像仓库主机名
  rke2:
    address:
      caCerts:
        label: CA证书
        toolTip: Agent需要验证来自信任地址的证书
      clusterCidr:
        label: 集群CIDR
      dns:
        label: 集群DNS
      domain:
        label: 集群域名
      fqdn:
        toolTip: FQDN将解析到集群中健康的control plane节点.
      header: 地址
      nodePortRange:
        label: NodePort服务端口范围
      serviceCidr:
        label: 服务CIDR
      tlsSan:
        label: TLS替代名称
    cloudProvider:
      header: 云供应商配置
      label: 云供应商
    cni:
      label: 容器网络供应商
    controlPlaneConcurrency:
      label: Control Plane并发
      toolTip: "可以是一个固定的节点数(如1), 也可以是一个百分比(如10%)."
    defaultPodSecurityPolicyTemplateName:
      label: 默认Pod安全策略
    drain:
      label: 清空节点
      toolTip: 清空预先删除了每个节点上的pod, 所以在升级的节点上没有运行的工作负载. 在没有清空的情况下进行升级, 速度更快, 但根pod仍然可能在升级过程中重新启动.
    enableNetworkPolicy:
      label: 项目网络隔离
    etcd:
      disableSnapshots:
        label: 自动快照
      exportMetric:
        "false": 仅供集群内访问
        label: 指标
        "true": 通过公开接口暴露
      snapshotRetention:
        label: 保持最后
      snapshotScheduleCron:
        label: 定时调度
    security:
      header: 安全
    snapshots:
      suffix: 每个节点的快照
    systemService:
      header: 系统服务
    workNode:
      label: Worker节点
    workerConcurrency:
      label: Worker并发
      toolTip: "可以是一个固定的节点数(如1), 也可以是一个百分比(如10%)."
  tabs:
    ace: 认证地址
    addons: 附加配置
    advanced: 高级
    agentEnv: Agent环境变量
    basic: 基础
    cluster: 集群配置
    machinePools: 主机池
    machines: 主机
    memberRoles: 成员角色
    networking: 网络
    registration: 注册
    registry: 镜像仓库
    upgrade: 升级策略
  toolsTip: 使用新的集群工具来管理和安装监控、日志和其他工具
clusterIndexPage:
  hardwareResourceGauge:
    consumption: "{suffix} {total} {units} 中的 {useful}"
    coresReserved: CPU 预留
    coresUsed: CPU 使用
    podsUsed: Pods 预留
    ramReserved: Memory 预留
    ramUsed: Memory 使用
    cores: 核心
    pods: Pods
    ram: 内存
    reserved: 已预留
    used: 已使用
  header: 集群仪表盘
  resourceGauge:
    totalResources: 资源总额
  sections:
    clusterMetrics:
      label: 集群指标
    etcdMetrics:
      label: Etcd 指标
    events:
      date:
        label: 更新时间
      label: 事件
      resource:
        label: 事件详情
    gatekeeper:
      buttonText: 配置 OPA Gatekeeper
      disabled: 未配置 OPA Gatekeeper
      label: 违反 OPA Gatekeeper 的限制规定
      noRows: 所有的 OPA Gatekeeper 限制都符合规定
    k8sMetrics:
      label: Kubernetes 组件指标
    nodes:
      label: 节点不健康
      noRows: 所有节点都处于健康状态
    alerts:
      label: 告警
    capacity:
      label: 容量
configmap:
  tabs:
    binaryData:
      label: 二进制数据
    data:
      label: 数据
      protip: 请在此处输入 UTF-8 文本数据
containerResourceLimit:
  cpuPlaceholder: 例如：1000
  helpText: 请配置容器可以使用的默认资源配额
  helpTextDetail: 容器可以使用的的默认资源配额
  label: 容器默认资源限制
  limitsCpu: CPU 限制
  limitsMemory: 内存限制
  memPlaceholder: 例如：128
  requestsCpu: CPU 预留
  requestsMemory: 内存预留
cruResource:
  backBody: 返回表单编辑不会保留对 YAML 做出的所有更改
  backToForm: 返回表单编辑
  cancelBody: 返回表单编辑不会保留对 YAML 做出的所有更改
  confirmBack: "确认"
  confirmCancel: "确认"
  previewYaml: 以 YAML 文件编辑
  reviewForm: "继续编辑 YAML"
  reviewYaml: "继续编辑 YAML"
detailText:
  binary: '<二进制数据：{n, number} bytes>'
  collapse: 隐藏
  empty: '<Empty>'
  plusMore: "{n, plural,\n  =1 {+ 1 more char}\n  other {+ {n, number} 更多 Chars}\n}"
etcdInfoBanner:
  failedProposals: "失败的proposal数量"
  hasLeader: "Etcd有一个领导者"
  leaderChanges: "领导者变化的次数"
featureFlags:
  label: 功能标志
  promptActivate: 请确认您要激活功能标志"{flag}"。
  promptDeactivate: 请确认你想停用功能标志"{flag}"。
  restartRequired: "注意：更新该功能标志需要重新启动"
  warning: 功能标志允许Rancher将某些功能关在标志后面。你应该谨慎地启用这些功能，它们应该被视为测试版功能，可能会给你的系统带来问题。此外，有些功能（非动态）需要重新启动Rancher服务器才能启用。改变非动态功能将重新启动Rancher pods，这将导致短暂的停电。
fleet:
  cluster:
    nonReady: 非就绪包
    summary: 资源概要
  clusterGroup:
    selector:
      label: 集群选择器
      matchesAll: 匹配到 {total, number} 个集群
      matchesNone: 与现有的集群都不匹配
      matchesSome: "{matched, plural,\n  =1 {与现有 {total, number} 个集群中的 1 个集群 \"{sample}\" 匹配}\n  other {现有 {total, number} 个集群，与其中的 {matched, number} 匹配，包括 \"{sample}\"}\n}"
  fleetSummary:
    state:
      error: '错误'
      success: '就绪'
      unknown: '未知'
      #info: 'Transitioning'
      warning: '警告'
  gitRepo:
    auth:
      label: 认证
    caBundle:
      label: 证书
      placeholder: "粘贴一个或多个证书，以“-----BEGIN CERTIFICATE----” 作为开头。"
    paths:
      addLabel: 添加路径
      empty: 默认使用的是 repo 的根目录。 要使用一个或多个不同的目录，请在这里添加。
      label: 路径
      placeholder: 例如：/directory/in/your/repo
    ref:
      branch: 分支
      branchLabel: 分支名称
      branchPlaceholder: 例如：master
      label: Watch
      revision: 修改
      revisionLabel: 标签或 Commit Hash
      revisionPlaceholder: 例如：v1.0.0
    repo:
      label: 代码库 URL 地址
      placeholder: '例如：https://github.com/rancher/fleet-examples.git'
    serviceAccount:
      label: Service Account 名称
      placeholder: "（选填项）在目标集群中使用Service Account"
    tabs:
      resources: 资源
      unready: 未就绪
    target:
      advanced: 高级选项
      cluster: 集群
      clusterGroup: 集群组
      label: 部署到
      labelLocal: 部署方式
      selectLabel: 目标类型
    targetDisplay:
      advanced: 高级选项
      all: 全部
      cluster: "集群"
      clusterGroup: "组"
      local: 本地
      none: None
    targetNamespace:
      label: 目标命名空间
      placeholder: "（选填项）要求所有资源都在此命名空间内"
    tls:
      label: TLS证书校验
      skip: 接受任何证书（不安全）
      specify: 指定接受的附加证书
      verify: 需要提供有效的证书
    workspace:
      label: 工作空间
footer:
  docs: Rancher 官方文档
  download: 下载 CLI
  forums: 论坛
  issue: 提交 GitHub Issue
  slack: Slack 讨论群
  wechat:
    modalText: 扫码关注 Rancher 中国微信技术群
    title: 微信
gatekeeperConstraint:
  match:
    title: 匹配
  tab:
    enforcementAction:
      title: 执行动作
    namespaces:
      sub:
        excludedNamespaces: 排除命名空间
        namespaceSelector:
          addNamespace: 添加命名空间
          title: 命名空间选择器
        namespaces: 命名空间
        scope:
          title: 范围
      title: 命名空间
    parameters:
      addParameter: 添加参数
      editAsForm: 作为表格编辑
      editAsYaml: 作为 YAML 编辑
      title: 参数
    rules:
      sub:
        labelSelector:
          addLabel: 添加
          title: 标签选择器
      title: 规则
  template: 模板
  violations:
    title: 违反规定
gatekeeperIndex:
  #poweredBy: OPA Gatekeeper
  unavailable: OPA Gatekeeper 不在 system-charts 应用商店中
  violations: 违反规定
##############################
# Special stuff
##############################
generic:
  add: 添加
  all: 全部
  back: 返回
  cancel: 取消
  close: 关闭
  comingSoon: 即将推出
  completed: 已完成
  copy: 复制
  create: 创建
  created: 创建时间
  customize: 定制
  default: 默认
  disabled: 禁用
  done: 完成
  enabled: 启用
  hideAdvanced: 隐藏高级选项
  id: ID
  ignored: 忽略
  invalidCron: 无效的 cron 调度
  key: 键
  labelsAndAnnotations: 标签和注释
  links: Links
  loading: 正在加载中...
  members: 成员
  na: n/a
  #na: n/a
  name: 名称
  never: 从不
  no: 否
  none: 无
  notFound: 未找到
  number: "{prefix}{value, number}{suffix}"
  #number: '{prefix}{value, number}{suffix}'
  overview: 概述
  plusMore: + {n} more
  privateRegistry: Private Registry
  provisioning: —
  readFromFile: 从文件读取
  register: 注册
  remove: 移除
  resource: "{count, plural,\none  {资源}\nother {资源}\n}"
  resourceCount: "{count, plural,\none  {1 resource}\nother {# resources}\n}"
  save: 保存
  showAdvanced: 展示高级选项
  techPreview: 技术预览
  type: 类型
  units:
    time:
      10s: 10秒
      15m: 15分钟
      1d: 1天
      1h: 1小时
      1m: 1分钟
      2h: 2小时
      30d: 30天
      30m: 30分钟
      30s: 30秒
      5m: 5分钟
      5s: 5秒
      6h: 6小时
      7d: 7天
  unknown: 未知
  value: 值
  yes: 是
  disable: 禁用
  enable: 启用
glance:
  cpu: CPU 使用量
  created: 创建时间
  failedToLoad: 加载表格失败
  grafana: Grafana
  grafanaDashboard: null
  memory: 内存
  nodes:
    total:
      label: "{count, plural,\n  =1 { 节点数 }\n  other { 总节点 }\n}"
  provider: 提供商
  reload: 重新加载
  version: Kubernetes 版本
  clusterInfo: 集群信息
  installMonitoring: 安装监控
  monitoringDashboard: 监控仪表盘
graphOptions:
  detail: 详情
  range: 范围
  refresh: 刷新
  summary: 概述
harvester:
  action:
    abortMigration: 取消迁移
    addHotplug: 添加卷
    addTemplateVersion: 添加模版版本
    backup: 备份
    cordon: 封锁
    createTemplate: 生成模板
    createVM: 创建虚拟机
    disableMaintenance: 关闭维护模式
    ejectCDROM: 弹出 CDROM
    enableMaintenance: 开启维护模式
    exportImage: 导出镜像
    launchFormTemplate: 从模板启动实例
    migrate: 迁移
    modifyTemplate: 修改模版 (创建新版本)
    pause: 暂停
    restart: 重启
    restore: 恢复
    restoreExistingVM: 恢复现存的虚拟机
    restoreNewVM: 恢复新的虚拟机
    setDefaultVersion: 设置默认版本
    start: 启动
    stop: 停止
    uncordon: 解除封锁
    unpause: 取消暂停
  backup:
    backupTargetTip: 用于访问备份存储的端点。 支持NFS和S3。
    createText: 恢复备份
    label: 备份
    matchTarget: 当前备份目标与现有目标不匹配。
    message:
      errorTip:
        middle: 设置
        prefix: 非法的备份目标
        suffic: ",错误信息： "
      noSetting:
        middle: '设置'
        prefix: '在创建新备份之前, 必须在'
        suffic: '中配置备份目标.'
      viewSetting:
        middle: 这里
        prefix: 点击
        suffic: 查看备份的配置详情.
    restore:
      backup: 备份名称
      createNew: 新建虚拟机
      deletePreviousVolumes: 历史卷清除策略
      replaceExisting: 选择已存在的虚拟机
      virtualMachineName: 虚拟机名称
    title: 恢复虚拟机
  cloudTemplate:
    label: Cloud 配置模板
    networkData: Network Data
    templateType: 模板类型
    userData: User Data
  dashboard:
    hardwareResourceGauge:
      cpu: CPU
      memory: 内存
      storage: 存储
    header: 仪表盘
    label: 概览
    sections:
      events:
        label: 事件
      vmMetrics:
        label: VM指标
    upgrade:
      currentVersion: 当前版本
      upgrade: 升级
      upgradeApp: 升级软件
      upgradeNode: 升级节点
      upgradeSysService: 升级系统服务
      upgradeTip: 请选中要升级到的版本
      versionLabel: 可用的兼容版本
  fields:
    PhysicalNic: 物理网卡
    count: 数量
    cpu: Cpu
    image: 镜像
    macAddress: mac地址
    memory: 内存
    model: 模式
    name: 名称
    network: 网络
    port: 端口
    protocol: 协议
    remove: 删除
    size: 大小
    type: 类型
    version: 版本
    virtaulName: 虚拟机名称
    volume: 卷
    ipv4Address: IPv4地址
  host:
    cordon:
      protip: 此操作将会标记节点 { node } 为不可调度.
      title: 封锁
    detail:
      compute: 计算节点
      consoleUrl: Console 地址
      containerRuntime: 容器运行时
      create: 创建时间
      customName: 自定义名称
      hostIP: 节点IP
      kernel: 内核
      management: 管理节点
      more: 更多信息
      networkType: 类型
      nic: 物理网卡
      notRecommended: 不推荐
      os: 操作系统
      role: 角色
      storage: 存储
      title:
        network: 网络配置
      update: 最近更新时间
      uuid: UUID
    disk:
      add: 添加硬盘
      description:
        label: 描述
      forceFormatted:
        label: 格式化
        toolTip: 格式化将会清除磁盘数据, 请确保对数据进行备份以免丢失.
        yes: 是 (Ext4文件系统)
      lastFormattedAt:
        info: 当前磁盘已完成格式化
      notification:
        success: '已更新主机"{name}"配置'
      path:
        label: 路径
    enableMaintenance:
      protip: 此操作会迁移当前节点上的所有虚拟机.
      title: 开启节点维护模式
    label: 主机
    promote:
      failed: 角色升级失败
      none: ' '
      promoteRestart: 角色升级重启中
      promoteSucceed: 角色升级完成
      running: 角色升级中
      unknown: 角色升级中断
    tabs:
      disk: 硬盘
      labels: 标签
      network: 网络
  image:
    fileName: 文件名
    label: 镜像
    size: 大小
    source: 来源
    sourceType:
      download: URL
      upload: 文件
    tabs:
      basics: 基本信息
    uploadFile: 上传文件
    url: 镜像地址
    urlTip: "<a href=\"https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats\" target=\"_blank\">qemu</a> 支持 <code>raw</code> 和 <code>qcow2</code> 镜像格式. 可启动的ISO镜像也可以是类似 <code>raw</code> 格式的镜像."
    warning:
      uploading: '{count} 个镜像正在上传中，请不要刷新或关闭当前页面.'
  modal:
    backup:
      addBackup: 添加备份
      success: '已启动备份 { backUpName }.'
    bundle:
      description: 描述
      requiredDesc: 描述是必填项!
      title: 创建支持包
      titleDescription: 收集Harvester系统相关日志, 以便定位问题和获取支持.
      url: Issue地址
    createTemplate:
      description: 描述
      message:
        failed: '生成模板失败！'
        success: '模板 { templateName } 创建成功.'
        tip: '请输入模版名称！'
      name: 名称
      title: '生成模版'
    ejectCDROM:
      delete: 删除
      operationTip: "选择您要删除的卷:"
      title: 弹出 CDROM
      warnTip: 弹出卷将导致重新启动虚拟机.
    exportImage:
      messae:
        success: '镜像 { name } 创建成功.'
      name: 镜像名称
      namespace: 镜像命名空间
      title: 导出镜像
    hotplug:
      success: "{ diskName } 已挂载到 { vm }"
      title: 添加卷
    migration:
      failedMessage: 最新迁移失败!
      fields:
        nodeName:
          label: 目标节点
          placeholder: 请选择目标节点
      title: 迁移
    restore:
      message:
        backup: 请选择需要还原的备份.
      selectBackup: 选择备份
      success: '虚拟机{ name }恢复成功.'
      title: 恢复备份
    hotunplug:
      success: '卷{ name } 拔出成功.'
  network:
    label: 网络
    message:
      errorTip:
        middle: 配置
        prefix: 非法的网络
        suffic: ",错误信息： "
      premise:
        middle: '设置'
        prefix: '您必须先配置网络'
        suffic: ",然后才能创建新网络。"
      viewSetting:
        middle: 这里
        prefix: 点击
        suffic: 查看集群网络配置.
      vlanInactive: 'VLAN网络在主机 {name} 上处于非活动状态'
    layer3Network:
      cidr:
        placeholder: '例如: 172.16.0.1/24'
      gateway:
        label: 网关
        placeholder: '例如: 172.16.0.1'
      mode:
        auto: 自动(DHCP)
        label: 模式
        manual: 手动
      serverIPAddr:
        label: DHCP服务IP
    tabs:
      basics: 基础
      layer3Network: 路由
  notification:
    title:
      error: 错误
      info: 提示
      succeed: 成功
      warning: 警告
  setting:
    defaultPhysicalNIC: 默认网络接口
    label: 设置
    placeholder:
      accessKeyId: 指定您的访问密钥ID
      cert: 上传自签名SSL证书
      secretAccessKey: 指定您的私密访问密钥
    validation:
      physicalNIC: DefaultPhysicalNIC
    vlanChangeTip: 新修改的默认网络接口仅适用于新增节点，不适用于现有节点
    message:
      ca:
        middle: '这里'
        prefix: '点击'
        suffic: '添加一个自定义证书.'
    percentTip: 括号内的数值代表所有主机上的网络接口的分布比例。如果选择了一个小于100%的接口，用户需要手动指定vlan网络配置失败的主机上的网络接口。
    vmForceDeletionPolicy:
      period: 周期
  sshKey:
    keypair: SSH 公钥
    label: SSH 秘钥
    tabs:
      basics: 基本信息
  tab:
    advanced: 高级选项
    network: 网络
    volume: 卷
  tableHeaders:
    actions: 操作
    attachedVM: 挂载VM
    backupTarget: 备份路径
    fingerprint: 唯一标识
    hostIp: 主机IP
    message: 消息
    network:
      type: 类型
      vlan: Vlan ID
    phase: 阶段
    progress: 进度
    readyToUse: 可用
    size: 大小
    targetVm: 目标VM
    value: 值
    vm:
      defaultVersion: 默认版本
      ipAddress: IP 地址
      node: 主机
  validation:
    custom:
      cidr: 非法的CIRD
      tooLongName: "\"名称\" 不能超过 {max} 个字符"
    image:
      ruleFileTip: '仅支持镜像后缀为 .img, .iso, .qcow, .qcow2, .raw'
      ruleTip: '仅支持镜像后缀为 .img, .iso, .qcow, .qcow2, .raw'
    vm:
      memory: "\"内存\" 是必填项"
      name: "\"名称\" 是必填项"
      network:
        duplicatedName: '网络名称重复'
        duplicatedPortName: '端口名重复'
        duplicatedPortNumber: '端口号重复'
        error: "网络 {prefix}: {message}"
        macFormat: 'MAC 地址格式不正确'
        name: "\"网络名称\" 是必填项"
      volume:
        docker: "\"Docker 镜像\" 是必填项"
        duplicatedName: '卷名称重复'
        error: "卷 {prefix}: {message}"
        image: "\"镜像\" 是必填项"
        needImageOrExisting: '至少需要一个镜像卷或已存在的系统卷'
        size: "\"大小\" 是必填项"
        type: "\"类型\" 是必填项"
        volume: "\"卷\" 是必填项"
  virtualMachine:
    cloudConfig:
      cloudInit:
        label: Cloud Init
        placeholder: 请选择...
      networkData:
        label: 网络配置模板
        tip: '网络设备配置可让您自定义实例的网络接口,例如管理子网分配，虚拟设备创建（bonds，bridges，Vlan）路由和DNS配置。 <a href="https://cloudinit.readthedocs.io/en/latest/topics/network-config-format-v1.html" target="_blank"> 查看更多 </a>'
        title: "Network Data:"
      title: Cloud配置
      userData:
        label: 用户配置模板
        tip: '您可以指定Cloud-init相关的用户数据以在启动期间配置实例或运行配置脚本。 如果一次启动多个实例，则该配置会对所有实例生效。<a href="https://cloudinit.readthedocs.io/en/latest/topics/examples.html" target="_blank"> 查看更多 </a>'
        title: "User Data:"
      createNew: 创建新模板...
      createTemplateTitle: '创建 {name}.'
    console:
      novnc: 在 Web VNC 中打开
      serial: 在 Serial Console 中打开
    createRunning: 创建时启动虚拟机
    createSSHKey: 创建新SSH密钥
    detail:
      GuestAgentNotInstalled: 访客代理未准备就绪
      console:
        down: 请启动虚拟机以访问控制台.
      details:
        CDROMs: CD-ROMs
        bootOrder: 启动顺序
        created: 创建时间
        down: 虚拟机未启动
        ended: 结束时间
        flavor: 规格
        hostname: 节点名称
        ipAddress: IP 地址
        kernelRelease: 内核版本
        metrics: 虚拟机指标
        name: 名称
        namespace: 命名空间
        node: 主机
        operatingSystem: 操作系统
        sourceNode: 源节点
        started: 开始时间
        targetNode: 目标节点
      notAvailable: 不可用
      tabs:
        basics: 基本信息
        cloudConfig: Cloud 配置
        configurations: 配置
        console: 控制台
        details: 详情
        disks: 硬盘
        environment: 环境
        events: 事件
        instance: 虚拟机
        keypairs: 公共密钥
        metrics: VM指标
        migration: 迁移
        monitor: 监控数据
        networkInterfaces: 网络接口
        networks: 网络
        overview: 概览
    enableUsb: 启动 USB Tablet 增强
    imageTip: 创建虚拟机所需的.iso，.img，.qcow2或.raw的外部镜像地址
    input:
      MachineType: 机器类型
      image: 镜像
      memory: 内存
      name: 名称
      sshKey: SSH 密钥
      sshKeyValue: SSH 公钥
    installAgent: 安装 qemu-guest-agent
    instance:
      multiple:
        count: 数量
        countTip: 创建虚拟机的实例数量必须大于 1 小于 10
        host:
          label: 主机名前缀
          placeholder: 默认为虚拟机名称
        label: 多个实例
        nameLabel: 名称前缀
        nameNsDescription: 每个实例的名称前缀
      single:
        host:
          label: 主机名
          placeholder: 默认为虚拟机名称
        label: 单个实例
        nameLabel: 名称
    label: 虚拟机
    machineTypeTip: '指定一个处理器架构来模拟。 要查看支持的体系结构列表，请运行：qemu-system-x86_64 -cpu？'
    network:
      addNetwork: 添加网络
      addPort: 添加端口
      title: 网络
    promptRemove:
      deleteAll: 全部删除
      title: "需要您要删除的卷:"
    restartNow: 现在重启
    restartTip: 现在重新启动虚拟机以使配置更改生效.
    scheduling:
      affinity:
        anyNode: '自动匹配节点运行 VM'
        schedulingRules: '通过调度规则匹配节点运行 VM'
        specificNode: 指定节点运行 VM
    sshTitle: 添加SSH公钥
    title: 虚拟机
    useTemplate:
      label: "使用模版:"
      template:
        label: 模版
      version:
        label: 版本
    volume:
      addContainer: 添加容器镜像
      addExistingVolume: 添加已存在的卷
      addVmImage: 添加VM镜像
      addVolume: 添加卷
      bootOrder: 引导顺序
      bus: Bus
      dockerImage: Docker镜像
      dragTip: 拖放卷或使用卷的箭头来更改引导顺序。
      edit: 编辑
      macTip: 提示：安装的操作系统内显示的MAC地址
      saveVolume: 更新卷
      setFirst: 设置为系统卷
      size: 大小
      title:
        container: 容器镜像
        existingVolume: 已存在的卷
        vmImage: 镜像卷
        volume: 卷
      type: 类型
      unmount:
        message: 您确定要卸载此卷吗？
        title: 你确定吗?
      volume: 卷
      volumeTip: VM仅包含一个cd-rom卷。 您可能要添加其他磁盘卷。
      volumeUpdate: '设置卷 { name } 成功'
    osType: 系统类型
    unplug:
      actionLabel: 拔出
      detachVolume: 拔出卷
      title: '你确定要拔掉卷{name} ?'
  virtualizationManagement:
    manage: 管理
  vmTemplate:
    label: 虚拟机模板
    nameNsDescription:
      name: 模板名称
    tabs:
      basics: 基本信息
  volume:
    image: 镜像
    imageName: 镜像
    label: 卷
    size: 大小
    source: 资源类型
    sourceOptions:
      new: New
      vmImage: VM Image
  generic:
    cpu: CPU
    hideMore: 隐藏更多
    memory: 内存
    noFileChosen: 没有选择任何文件
    showMore: 显示更多
    storage: 存储
  manager:
    cluster:
      description: Harvester是一个采用企业级开源技术，包括Kubernetes、Kubevirt和Longhorn，为裸金属服务器打造的现代超融合基础设施（HCI）解决方案.
      label: Harvester集群
      learnMore: 了解更多的harvester可以通过<a target="_blank" href="https://harvesterhci.io/" rel="noopener noreferrer nofollow">Harvester网站</a>或者阅读<a target="_blank" href="https://docs.harvesterhci.io/" rel="noopener noreferrer nofollow">Harvester文档</a>
      none: 没有内容显示
  namespace:
    label: 命名空间
  projectNamespace:
    label: 项目/命名空间
  service:
    healthCheckFailureThreshold:
      description: 如果健康检查失败的数量达到失败阈值，后端服务器将停止转发流量。
      label: 健康检查失败阙值
    healthCheckPeriod:
      label: 健康检查周期
    healthCheckPort:
      description: 探针将访问由后端服务器IP和端口组成的地址.
      label: 健康检查端口
    healthCheckSuccessThreshold:
      description: 如果探针连续检测到一个地址的成功次数达到成功阈值，那么后端服务器就可以开始转发流量.
      label: 健康检查成功阙值
    healthCheckTimeout:
      label: 健康检查超时
    title: 附加配置
  support:
    kubeconfig:
      title: 下载KubeConfig
      titleDescription: 下载kubeconfig用于调试
    title: Harvester支持
  vip:
    add:
      label: 添加IP池
    cidr:
      invalid: '"CIRD" 不合法.'
    namespace:
      label: 命名空间
hpa:
  detail:
    currentMetrics:
      header: 当前指标
      noMetrics: 没有当前指标
    metricHeader: "{source} 指标"
  metricIdentifier:
    name:
      label: 指标名称
      placeholder: 例如：packets-per-second
    selector:
      label: 添加 Selector
  metricTarget:
    averageVal:
      label: 平均值
    quantity:
      label: 数量
    type:
      label: 类型
    utilization:
      label: 平均利用率
    value:
      label: 值
  metrics:
    headers:
      metricName: 名称
      objectKind: 对象类型
      objectName: 对象名称
      quantity: 数量
      resource: 资源名称
      targetName: 目标名称
      value: 值
    source: 数据源
  objectReferance:
    api:
      label: 引用的API版本
      placeholder: 例如：apps/v1beta1
    kind:
      label: 引用类型
      placeholder: 例如：Deployment
    name:
      label: 引用名称
      placeholder: 例如：php-apache
  tabs:
    labels: 标签
    metrics: 指标
    target: 目标
    workload: 工作负载
  types:
    cpu: CPU
    memory: 内存
  warnings:
    custom: 为了使用HPA的自定义指标，你需要部署自定义metric server，如prometheus适配器。
    external: 为了使用HPA的外部指标，你需要部署外部metric server，如prometheus适配器。
    noMetric: 为了使用HPA的资源指标，您需要部署metric server。
    resource: 选定的目标参考在规格上没有正确的资源请求。否则，HPA指标将不会有任何影响。
  workloadTab:
    current: 当前的副本
    last: 最后一个刻度时间
    max: 最大副本数量
    min: 最小副本数量
    targetReference: 目标参考
import:
  defaultNamespace:
    label: 默认命名空间
  success: "Applied {count, plural,\n=1 {1 Resource}\nother {#Resources}\n}"
  title: 导入 YAML
ingress:
  certificates:
    addCertificate: 添加证书
    addHost: 添加主机
    certificate:
      doesntExist: 所选证书不存在
      label: 证书 - 密钥名称
    defaultCertLabel: 默认 Ingress Controller 证书
    headers:
      certificate: 证书
      hosts: 主机
    host:
      label: 主机
      placeholder: 例如：example.com
    label: 证书
    removeHost: 移除
  defaultBackend:
    label: 默认后端
    noServiceSelected: 没有配置默认后端
    port:
      label: 端口
      placeholder: 例如 80 或 http
    targetService:
      doesntExist: 您选择的服务不存在
      label: 目标服务
    warning: "警告：默认后端在整个集群中全局使用"
  rules:
    addPath: 添加路径
    addRule: 添加规则
    headers:
      certificates: 证书
      path: 路径
      pathType: 路径类型
      port: 端口
      target: 目标服务
    hostname: 主机名
    path:
      label: 路径
      placeholder: 例如：/foo
    port:
      label: 端口
      placeholder: 例如：80 或 http
    removePath: 删除路径
    requestHost:
      label: 请求主机
      placeholder: 例如：example.com
    target:
      doesntExist: 您选择的服务不存在
      label: 目标服务
    title: 规则
  rulesAndCertificates:
    defaultCertificate: 默认
    title: 规则和证书
  target:
    default: 默认
internalExternalIP:
  none: 无
istio:
  cni: 启用 CNI
  customOverlayFile:
    label: 自定义覆盖文件
    tip: "<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://istio.io/latest/docs/setup/install/istioctl/#customizing-the-configuration\">覆盖文件</a>允许在基本的 Rancher Istio 安装之上进行额外的配置。您可以利用<a href=\"https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\" >IstioOperator API</a>对所有组件进行更改和添加，并通过此覆盖 YAML 文件应用这些更改。"
  description: 'Rancher Istio Helm Chart 为您安装了一个最小的 Istio 配置，以便您开始与您的应用程序集成。如果您想获得有关 Istio 的更多信息，请访问 <a target="_blank" href="https://istio.io/latest/docs/concepts/what-is-istio" rel="noopener nofollow">https://istio.io/latest/docs/concepts/what-is-istio/</a>。'
  egressGateway: 启用 Egress 网关
  ingressGateway: 启用 Ingress 网关
  istiodRemote: 启用 istiodRemote
  kiali: 启用 Kiali
  links:
    disabled: '没有安装{app}应用'
    jaeger:
      description: 监控并排除基于微服务的分布式系统的故障。
      label: Jaeger
    kiali:
      description: 可视化服务网状结构中的服务以及它们是如何连接的。要想让 Kiali 显示数据，需要安装 Prometheus。如果您需要监控解决方案，请安装 <a rel="noopener noreferrer nofollow" href="{link}"> Rancher 的监控</a>。
      label: Kiali
  pilot: 启用 Pilot
  policy: 启用 Policy
  poweredBy: 由<a target="_blank" rel="noopener noreferrer nofollow" href='https://istio.io/latest/'>Istio</a>支持
  telemetry: 启用遥测
  titles:
    advanced: 高级选项
    components: 组件
    customAnswers: 自定义回复
    description: 描述
  tracing: 启用 Jaeger 跟踪 (limited)
  v1Warning: 请在安装这个版本之前卸载 <code>istio-system</code> 命名空间中的当前 Istio 版本。
keyValue:
  keyPlaceholder: "例如: foo"
  valuePlaceholder: "例如: bar"
labels:
  addAnnotation: 添加
  addLabel: 添加
  addSetLabel: 添加或配置标签
  annotations:
    title: 注释
  labels:
    title: 标签
  addTag: 添加标签
  addTaint: 添加污点
landing:
  clusters: 集群
  commercial:
    body: 了解商业支持
    title: 付费支持
  community:
    docs: Rancher文档
    forums: 论坛
    title: 社区支持
  landingPrefs:
    options:
      appsAndMarketplace: 应用市场页面
      custom: 自定义首页
      defaultOverview: 默认集群（{cluster}）的概览页面
      fleet: Fleet页面
      lastVisited: 上一次登录时最后访问的页面
      thisScreen: 当前页面
      homePage: 首页
    title: 你想在登录时看到什么？
    body: '你可以改变你登陆时的位置:'
  learnMore: 了解更多
  migration:
    body: 阅读集群管理器用户的迁移指南--你需要利用扩展的集群资源管理器的一切优势
    title: 迁移帮助
  # taken from Ember: https://github.com/rancher/ui/blob/master/app/components/modal-home/template.hbs
  releaseNotes: '<ul class="list-unstyled"> <li class="mb-10"> <b>Cluster Explorer:</b> 新的仪表盘提供了对Rancher管理的集群的更深入理解。 <ul> <li>管理所有Kubernetes集群资源，包括来自Kubernetes运营商生态系统的定制资源</li> <li>从我们新的Apps &amp; Marketplace部署和管理Helm Chart。</li> <li>在一个新的类似IDE的查看器中查看日志并与kubectl shell互动</li> </ul> </li> <li class="mb-10"><b>由Prometheus提供的监控和警报：</b>允许管理定制的Grafana仪表盘，并为AlertManager提供定制。</li> <li class="mb-10"><b>由Banzai Cloud提供日志：</b> 自定义FluentBit和Fluentd的配置，并将日志运送到远程数据存储。</li> <li class="mb-10"><b>由kube-bench提供的CIS扫描：</b> 扩展支持为EKS和GKE平台定制的CIS扫描，并对任何Kubernetes发行版进行通用扫描</li> <li class="mb-10"><b>Istio 1.7+：</b> 允许用户部署多个Ingress和Egress网关</li> <li class="mb-10"> <b>Rancher 由Fleet提供的持续交付：</b> Fleet是一个Rancher内置的部署工具，用于在多个集群中从Git源码库交付应用程序和配置。 <ul> <li>部署由manifests、kustomize或Helm定义的任何Kubernetes资源</li> <li>使用staged checkout和pull-based的更新模式将部署扩展到任何数量的集群中</li> <li>将集群组织成组，以便更容易管理</li> <li>将Git源存储库映射到目标集群组上</li> </ul> </li> <li class="mb-10"> <b>EKS生命周期管理功能增强</b> <ul> <li>集群创建已得到加强，支持管理节点组、私人访问和控制平面记录</li> <li>注册现有的EKS集群允许管理升级和配置</li> </ul> </li> <li> <b>Rancher Server备份：</b> <ul> <li>在不能访问etcd数据库的情况下备份Rancher服务器</li> <li>将数据恢复到任何Kubernetes集群中</li> </ul> </li> </ul>'
  seeWhatsNew: 了解更多关于该版本的改进和新功能。
  welcomeToRancher: '欢迎使用 {vendor}'
  whatsNewLink: "2.6的新内容"
  gettingStarted:
    body: 浏览快速入门指南。对于集群管理员，可以了解更多关于Dashboad UI的新特性
    title: 快速开始
locale:
  en-us: English
  none: (None)
  zh-hans: 简体中文
logging:
  awsElasticsearch:
  clusterFlow:
    noOutputsBanner: 在选定的命名空间中没有集群输出
  #url: URL
  #keyId: Key Id
  #secretKey: Secret Key
  #azurestorage:
  #storageAccount: Storage Account
  #accessKey:  Access Key
  #container: Container
  #path: 路径
  #storeAs: Store As
  #cloudwatch:
  #keyId: Key Id
  #secretKey: Secret Key
  #endpoint: Endpoint
  #region: Region
  datadog:
    #apiKey: API Key
    #useSSL: Use SSL
    useCompression: 使用压缩
    #host: Host
  elasticsearch:
    caFile:
      label: CA 证书文件
    clientCert:
      label: 客户端证书
      placeholder: 粘贴客户端证书
    clientKey:
    #label: Client Key
    #placeholder: 粘贴 client key
    #clientKeyPass: Client Key Pass

    host: 主机
    indexName: 索引名称
    password: 密码
    port: 端口
    scheme: 主题
    user: 用户名
  file:
    path: 路径
  flow:
    clusterOutputs:
      doesntExistTooltip: 该集群输出不存在
      label: 集群输出
    filters:
      label: 过滤
    matches:
      addExclude: 添加排除规则
      addSelect: 添加包含规则
      label: 匹配
    outputs:
      doesntExistTooltip: 该集群输出不存在
      label: 输出
  forward:
    clientCertPath: 客户端证书路径
    clientPrivateKeyPassphrase: 客户端私钥密码
    clientPrivateKeyPath: 客户端私钥路径
    host: 主机
    password: 密码
    port: 端口
    sharedKey: 共享密钥
    username: 用户名
  gcs:
    bucket: 桶名称
    credentialsJson: 凭证
    enableCompression: 启用压缩
    overwriteExistingPath: 覆盖现有的路径
    path: 路径
    project: 项目
    #kinesisStream:
    #streamName: Stream Name
    #keyId: Key Id
    #secretKey: Secret Key
    #logdna:
    #apiKey: API Key
    #hostname: Hostname
    #app: App
    #logz:
    #url: URL
    #port: Port
    token: API 令牌
  install:
    dockerRootDirectory: Docker根目录
    enableAdditionalLoggingSources: 启用增强的云日志收集服务
    k3sContainerEngine: K3S 容器引擎
  kafka:
    #brokers: Brokers
    defaultTopic: 默认 Topic
    password: 密码
    saslOverSsl: 通过SSL实现SASL
    scramMechanism: Scram 机制
    sslCaCert:
      label: SSL CA 证书
      placeholder: 请输入 CA 证书
    sslClientCert:
      label: SSL 客户端证书
      placeholder: 请把客户端证书粘贴在 CA 证书内
    sslClientCertChain:
      label: SSL 客户端证书链
      placeholder: 请输入 SSL 客户端证书链
    sslClientCertKey: SSL 客户端证书密钥
    username: 用户名
  loki:
    caCert: CA 证书
    cert: 证书
    configureKubernetesLabels: 以类似 Prometheus 的格式配置 Kubernetes 元数据
    dropSingleKey: 如果一条记录只有 1 个键，那么只需将日志行设置为该值并丢弃该键
    extractKubernetesLabels: 提取 Kubernetes 标签作为 Loki 标签
    key: 密钥
    password: 密码
    #url: URL
    tenant: 租户
    username: 用户名
  newrelic:
    apiKey: API 密钥
    #licenseKey: License Key
    #baseURI: Base URI
  output:
    sections:
      access: 访问
      certificate: SSL 证书
      labels: 标签
      #outputProviders:

      target: 目标
    selectBanner: 选择以配置输出
    selectOutputs: 选择输出
    #elasticsearch: Elasticsearch
    #splunkHec: Splunk
    #kafka: Kafka
    #forward: Fluentd
    #loki: Loki
    #awsElasticsearch: Amazon Elasticsearch
    #azurestorage: Azure Storage
    #cloudwatch: Cloudwatch
    #datadog: Datadog
    #file: File
    #gcs: GCS
    #kinesisStream: Kinesis Stream
    #logdna: LogDNA
    #logz: LogZ
    #newrelic: New Relic
    #sumologic: SumoLogic
    #syslog: Syslog
    #s3: S3
    unknown: 未知类型
  overview:
    #poweredBy: Banzai Cloud
    clusterLevel: 集群级别
    namespaceLevel: 命名空间级别
  provider: 提供商
  s3:
    overwriteExistingPath: 覆盖现有的路径
    #keyId: Key Id
    #secretKey: Secret Key
    #endpoint: Endpoint
    #bucket: Bucket
    path: 路径
  splunk:
    #indexName: Index Name
    #source: Source
    caFile: CA 文件
    caPath: CA 路径（目录）
    clientCert: 客户端证书
    clientKey: 客户端密钥
    host: splunk 主机
    insecureSsl: 不安全的SSL
    port: 端口
    protocol: 协议
    #index: Index
    token: 令牌
  sumologic:
    endpoint: 端点
    sourceName: 源名称
  syslog:
    buffer:
      chunkLimitRecords: 块限制 chunkLimitRecords
      chunkLimitSize: 存储块大小限制
      flushInterval: 冲洗时间间隔
      #timekey: Timekey
      #timekeyWait: Timekey Wait
      #timekeyUseUTC: Timekey 使用 UTC

      #title: Buffer
      tags: 标签
      totalLimitSize: 总限制大小
    format:
      addNewLine: 添加新行
      #messageKey: Message Key

      title: 格式
      type: 类型
    host: syslog 主机地址
    insecure: 不安全的
    port: 端口
    transport: 传输
    trustedCaPath: 受信 CA 路径
login:
  error: 登录时发生错误，请重试。
  howdy: 您好！
  loggedIn: 已登录
  loggedOut: 您已登出当前账号。
  loggingIn: 登录中...
  loginAgain: 请重新登录。
  loginWithLocal: 使用Local User账户登录
  loginWithProvider: 使用 {provider} 登录
  password: 密码
  useLocal: 使用Local User账户登录
  useProvider: 使用 {provider} 登录
  username: 用户名
  welcome: 欢迎使用 {vendor}
longhorn:
  overview:
    linkedList:
      longhorn:
        #label: 'Longhorn'
        description: '通过 UI 管理存储系统'
        na: 资源不可用
    subtitle: "由<a href='https://github.com/longhorn' target='_blank' rel='noopener nofollow noreferrer' >Longhorn</a>提供支持"
    title: 概述
##############################
# Model Properties
##############################
model:
  account:
    kind:
      admin: 管理员
      agent: Agent
      project: 环境
      registeredAgent: Registered Agent
      service: 服务
      user: 用户名
  "catalog.cattle.io.app":
    firstDeployed: 首次部署
    lastDeployed: 最后部署
  #authConfig:
  #description:
  #ldap: LDAP
  #saml: SAML
  #oauth: OAuth
  #provider:
  #system: System
  #local: Local
  #multiple: Multiple
  #activedirectory: ActiveDirectory
  #azuread: AzureAD
  #github: GitHub
  #keycloak: Keycloak
  #ldap: LDAP
  #openldap: OpenLDAP
  #shibboleth: Shibboleth
  #ping: Ping Identity
  #adfs: ADFS
  #okta: Okta
  #freeipa: FreeIPA
  #googleoauth: Google

  cluster:
    name: 集群名称
  ingress:
    displayKind: 7 层负载均衡
  machine:
    role:
    #controlPlane: Control Plane
    #etcd: etcd
    #worker: Worker
  openldapconfig:
    domain:
      help: 只有此目录下的用户才能正常登录。
      label: 用户搜索起点
      placeholder: "例如：ou=Users,dc=mycompany,dc=com"
    server:
      label: 主机名称或 IP 地址
    serviceAccountPassword:
      label: Service Account 密码
    serviceAccountUsername:
      label: Service Account 用户名
  projectMember:
    role:
      member: 成员
      owner: 所有者
      readonly: 只读
      restricted: 受限
  service:
    displayKind:
      generic: 服务
      loadBalancer: 4 层负载均衡
monitoring:
  accessModes:
    many: 多次读写
    once: 一次读写
    readOnlyMany: 多次只读
  aggregateDefaultRoles:
    label: 聚合为默认 Kubernetes 角色
    tip: "将标签添加到监控图部署的ClusterRoles上，以<a target=\"_blank\" rel=\"noopener nofollow noreferrer\" href=\"https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles\">聚合到相应的默认k8s管理、编辑和查看ClusterRoles。</a>。"
  alerting:
    config:
      label: 配置告警管理
    enable:
      label: 部署 Alertmanager
    secrets:
      additional:
        info: "密文应挂载到容器路径 <pre class='inline-block m-0'>/etc/alertmanager/secrets/</pre>。"
        label: 附加密文
      existing: 选择现有的配置密文
      info: |
        <span class="text-bold">创建默认配置</span>。在部署这个 chart 时，将在<pre class='inline-block m-0'>cattle-monitoring-system</pre> 命名空间中创建一个包含 Alertmanager 配置的密钥，名称为<pre class='inline-block m-0'>alertmanager-rancher-monitoring-alertmanager</pre>。默认情况下，在卸载或升级此图表时，此 Secret 将永远不会被修改。<br/>
        一旦您部署了这个 chart，您应该通过用户界面编辑密钥，以便添加您的自定义通知配置，这些配置将被 Alertmanager 用于发送警报。<br /> <br />
        <span class="text-bold">选择一个现有的配置密钥</span>：您必须指定一个存在于<pre class='inline-block m-0'>cattle-monitoring-system</pre>命名空间中的密钥。如果命名空间不存在，您将无法选择一个现有的密钥。
      label: Alertmanager 密文
      new: 创建默认配置
      radio:
        label: 配置密文
    templates:
      keyLabel: 文件名称
      label: 模板文件
      valueLabel: YAML 模板
    title: 配置 Alertmanager
  clusterType:
    label: 集群类型
    placeholder: 选择集群类型
  createDefaultRoles:
    label: 创建默认 Monitoring 集群角色
    tip: '创建 <code>monitoring-admin</code>，<code>monitoring-edit</code>，和 <code> monitor-view</code> ClusterRoles，可以被分配给用户，为部署监控 Chart 安装 CRDs 提供权限。'
  etcdNodeDirectory:
    label: ETCD 节点证书目录
    tooltip: '对于使用 RancherOS 作为 etcd 节点的集群，这个选项应该设置为 <pre class="line-block m-0" >/opt/rke/etc/kubernetes/ssl</pre>。不支持需要指定多个证书目录的混合环境(例如，由 RancherOS 和 Ubuntu 主机组成的 etcd 平面)。'
  grafana:
    storage:
      annotations: PVC 注释
      className: 存储类名称
      existingClaim: 使用已有的 Claim
      #finalizers: PVC Finalizers
      label: Grafana 的持久存储
      mode: 访问模式
      selector: 选择器
      size: 大小
      subpath: 使用子路径
      type: 持久存储类型
      types:
        existing: 使用已有的 PVC 启用 Grafana
        statefulset: 使用 StatefulSet 模板启用 Grafana
        template: 使用 PVC 模板启用 Grafana
      volumeMode: 存储卷模式
      volumeName: 存储卷名称
    title: 配置 Grafana
  overview:
    alertsList:
      ends:
        label: 停止于
      label: 已启用的告警
      message:
        label: 信息
      severity:
        label: 严重程度
      start:
        label: 开始于
    linkedList:
      alertManager:
        description: 已启用的告警
        #label: Alertmanager
      grafana:
        description: Metrics 仪表盘
        #label: Grafana
      na: 资源不可用
      prometheusPromQl:
        description: PromQL 图表
        label: Prometheus 图表
      prometheusRules:
        description: 配置规则
        label: Prometheus 规则
      prometheusTargets:
        description: 配置目标
        #label: Prometheus Targets
    subtitle: '由<a href=''https://github.com/coreos/prometheus-operator'' target=''_blank'' rel=''noopener nofollow'' >Prometheus</a>提供支持'
    title: 仪表盘
    v1Warning: '当前监控由 Rancher UI 部署，如果你想在仪表盘中启用新的监控，请先在 Rancher UI 中禁用原来的监控。'
  prometheus:
    config:
      #adminApi: Admin API
      evaluation: 评估时间间隔
      ignoreNamespaceSelectors:
        help: '忽略命名空间选择器允许集群管理员限制团队查看他们有权监视的命名空间之外的资源，但这会破坏应用程序的功能，这些应用程序依赖于设置跨多个命名空间捕获目标监控数据，比如 Istio。'
        label: 命名空间选择器
        radio:
          enforced: "使用: 监控可以基于与命名空间选择器字段匹配的命名空间访问资源"
          ignored: "忽略: 监控只能访问它们所在命名空间中的资源"
      limits:
        cpu: CPU 限制
        memory: Memory 限制
      requests:
        cpu: CPU 预留
        memory: Memory 预留
      resourceLimits: 资源限制
      retention: 预留
      retentionSize: 预留大小
      scrape: 刮擦间隔（prometheus 获取数据间隔）
    storage:
      className: 存储类名称
      label: Prometheus 持久存储
      mode: 访问模式
      selector: 选择器
      selectorWarning: '如果你正在使用一个动态配置器(例如 Longhorn)，不应该指定选择器，因为带有非空选择器的PVC不能动态配置PV。'
      size: 大小
      volumeMode: Volume 模式
      volumeName: Volume 名称
    title: 配置 Prometheus
    warningInstalled: "'警告：目前已经部署了Prometheus Operators。目前不支持在一个集群上部署多个Prometheus Operators。在尝试安装此chart之前，请从该集群中移除所有其他的普罗米修斯Operators部署。\n如果您是从启用了监控功能的旧版Rancher迁移过来的，请在尝试安装此chart之前完全禁用此集群上的监控功能。\n"
  receiver:
    fields:
      name: 名称
    tls:
      #label: SSL
      caFilePath:
        label: CA 文件路径
        placeholder: 例如：./ca-file.csr
      certFilePath:
        label: 证书文件路径
        placeholder: 例如：./cert-file.crt
      keyFilePath:
        label: 密钥文件路径
        placeholder: 例如：./key-file.pfx
      secretsBanner: 当部署监控图表时，必须在<pre class="inline-block m-0 p-0 vertical-middle">alertmanager.alertmanagerSpec.secrets</pre>中引用以下文件路径。
  route:
    fields:
      groupBy: Group By
      groupInterval: 组间隔
      groupWait: 组等待
      receiver: 接收者
      repeatInterval: 重复间隔
  tabs:
    alerting: 告警
    general: 总体
    #grafana: Grafana
    #prometheus: Prometheus
  v1Warning: '当前监控由 Rancher UI 部署，如果你想在仪表盘中启用新的监控，请先在 Rancher UI 中禁用原来的监控。'
  volume:
    modes:
      block: 块
      file: 文件系统
monitoringReceiver:
  addButton: 添加 {type}
  auth:
    authType: 认证类型
    bearerToken:
      #label: Bearer Token
      placeholder: 例如：secret-token
    #basicAuth:
    #label: Basic Auth
    bearerTokenFile:
      #label: Bearer Token File
      placeholder: 例如：./user_token
    label: 认证
    none:
      label: 无
    password: 密码
    username: 用户名
  custom:
    info: 这里提供的YAML将直接附加到Alertmanager的接收器的配置密钥中。
    label: 自定义
    title: 自定义参数
  email:
    label: 电子邮箱
    title: 电子邮箱参数
  opsgenie:
    #label: Opsgenie
    title: Opsgenie参数
  pagerduty:
    info: "你可以找到更多关于为PagerDuty创建集成密钥的信息<a href='https://www.pagerduty.com/docs/guides/prometheus-integration-guide/' target='_blank' rel='noopener nofollow' class='flex-right'>这里</a>。"
    #label: PagerDuty
    title: PagerDuty参数
  shared:
    proxyUrl:
      label: 代理URL
      placeholder: 例如：http://my-proxy/
    sendResolved:
      label: 启用发送已解决的警报
  slack:
    info: "您可以在<a href='https://rancher.slack.com/apps/A0F7XDUAZ-incoming-webhooks' target='_blank' rel='noopener noreferrer nofollow'>这里</a>找到有关为Slack创建传入Webhooks的其他信息。"
    label: Slack
    title: Slack参数
  webhook:
    add:
      #msTeams: Microsoft Teams
      alibabaCloudSms: 阿里巴巴云短信
      generic: 通用
    banner: 要使用Microsoft Teams或阿里巴巴云短信，你需要先安装<pre class="inline-block m-0 p-0 vertical-middle">rancher-alerting-drivers</pre>。
    modifyNamespace: 如果<pre class="inline-block m-0 p-0 vertical-middle">rancher-alerting-drivers</pre>被安装在一个非默认的命名空间中，你需要更新下面网址中的命名空间。
    #label: Webhook
    title: Webhook参数
    urlTooltip: 对于一些webhooks来说，这是一个指向DNS服务的url
  pandariaWebhook:
    label: Pandaria Webhook
    add:
      dingTalk: 钉钉
      msTeams: MS Teams
      aliyunSMS: 阿里云短信
      serviceNow: Service Now
    aliyunSMS:
      accessKeyIdLabel: 访问秘钥
      accessKeyIdPlaceholder: 阿里云访问秘钥
      accessKeySecretLabel: 访问秘钥令牌
      accessKeySecretPlaceholder: 阿里云访问秘钥所对应的令牌
      templateCodeLabel: 模版 CODE
      templateCodePlaceholder: 模版管理中配置的模版对应的 CODE
      signatureNameLabel: 签名名称
      signatureNamePlaceholder: 签名管理中配置的签名名称
      phoneNumberLabel: 手机号
      phoneNumberPlaceholder: 你要添加的手机号码
      phoenNumberButton: 添加手机号
    dingTalk:
      secretLabel: 密钥
      secretPlaceholder: 仅在选择“加签”时需要填写
monitoringRoute:
  groups:
    label: 分组
  info: 这是 Alertmanager 使用的默认通知，作为与任何其他路由不匹配的警报的默认目的地。此通知必须存在，不能删除。
  interval:
    label: 组间隔
  matching:
    info: 根路由必须匹配所有内容，因此无法配置匹配。
    label: 匹配
  receiver:
    label: 接收者
  regex:
    label: 匹配正则表达式
  repeatInterval:
    label: 重复间隔
  wait:
    label: 组等待时长
nameNsDescription:
  description:
    label: 描述
    placeholder: 请输入一些能更好地描述该资源的文字
  name:
    label: 名称
    placeholder: '请输入名称'
  namespace:
    label: 命名空间
    #placeholder:
  workspace:
    label: 工作空间
    #placeholder:
namespace:
  containerResourceLimit: 容器资源限制
  disableAutoInjection: 禁用Istio自动注入
  enableAutoInjection: 启用Istio自动注入
  project:
    label: 项目
  resources: 资源
  move: 移动
namespaceFilter:
  selected:
    label: "{total} 项目选择"
namespaceList:
  addLabel: 添加命名空间
  selectLabel: 命名空间
#locale:
#en-us: English
#zh-hans: 简体中文
#none: (None)
nav:
  apps: 应用商店
  auditLog: 审计日志
  backToRancher: 集群管理 UI
  categories:
    configuration: 配置
    explore: 浏览集群
    legacy: 旧版应用
    multiCluster: 全局应用
  clusterTools: 集群工具
  failWhale:
    reload: 重新加载
    separator: 或者
  group:
    cluster: 集群
    imageRepo: 镜像仓库
    inUse: 更多资源
    monitoring: 监控
    rbac: RBAC
    serviceDiscovery: 服务发现
    starred: 已收藏
    storage: 存储
    workload: 工作负载
    advanced: 高级
  header:
    restoreCards: 恢复隐藏的卡片
    setLoginPage: 设置为登录页面
  home: 返回首页
  imageRepo:
    config: Harbor 配置
    logs: 日志
    projects: 镜像管理
  import: 导入YAML
  kubeconfig: 下载KubeConfig
  manageUI: 集群管理 UI
  ns:
    all: 全部命名空间
    clusterLevel: 集群资源
    namespace: "{name}"
    namespaced: 命名空间资源
    orphan: 不在项目中
    project: "项目名称: {name}"
    system: 系统命名空间
    user: 用户命名空间
  resourceSearch:
    label: 资源搜索
    placeholder: 输入关键词，搜索资源
    toolTip: 资源搜索{key}
  search:
    noResults: 没有与关键词匹配的集群
    placeholder: 输入关键词，搜索集群
  shell: 命令行
  support: 帮助
  title: 仪表盘
  userMenu:
    accountAndKeys: 账号 & API密钥
    logOut: 登出
    preferences: 偏好
  quotas: 配额
  vlanSubnet:
    label: 扁平网络
  cisF5:
    controllers: F5 负载均衡
    tls: TLS
  tools:
    tab: 工具
    cisF5: F5 负载均衡服务
node:
  detail:
    detailTop:
      containerRuntime: 容器运行时
      externalIP: 外部IP地址
      internalIP: 内部IP地址
      #os: OS
      version: 版本
    glance:
      consumptionGauge:
        amount: "已使用{total} {unit}中的{used}"
        cpu: CPU
        memory: 内存
        pods: PODS
        used: 已使用
      diskPressure: 磁盘压力
      kubelet: kubelet
      memoryPressure: 内存压力
      pidPressure: PID 压力
    tab:
      conditions: 状态
      images: 镜像
      info:
        key:
          architecture: 架构
          bootID: Boot ID
          containerRuntimeVersion: Container Runtime 版本
          kernelVersion: Kernel 版本
          kubeProxyVersion: Kube Proxy 版本
          kubeletVersion: Kubelet 版本
          machineID: 机器 ID
          operatingSystem: 操作系统
          osImage: 镜像
          systemUUID: System UUID
        label: 信息
      pods: Pods
      taints: 污点
persistentVolume:
  awsElasticBlockStore:
    #label: Amazon EBS Disk
    volumeId:
      label: 卷ID
      placeholder: 例如：volume1
  azureDisk:
    cachingMode:
      label: 缓存模式
      none: 无
      readOnly: 只读
      readWrite: 读写
    #label: Azure Disk
    diskName:
      label: Disk名称
      placeholder: 例如：kubernetes-pvc
    diskURI:
      #label: Disk URI
      placeholder: 例如：https://example.com/disk
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    kind:
      dedicated: 专用
      label: 类型
      managed: 管理
      shared: 共享
    readOnly:
      label: 只读
  azureFile:
    #label: Azure Filesystem
    shareName:
      label: Share名称
      placeholder: 例如：abc
  cephfs:
    label: Ceph Filesystem（不支持）
    path:
      label: 路径
      placeholder: 例如：/var
    secretFile:
      label: 密钥文件
      placeholder: 例如：secret
    user:
      label: 用户
      placeholder: 例如：root
  cinder:
    label: Openstack Cinder Volume（不支持）
    volumeId:
      #label: Volume ID
      placeholder: 例如：vol
  csi:
    controllerExpandSecretName:
      #label: Controller Expand Secret Name 
      placeholder: 例如：secret
    controllerExpandSecretNamespace:
      #label: Controller Expand Secret Namespace 
      placeholder: 例如：default
    controllerPublishSecretName:
      #label: Controller Publish Secret Name 
      placeholder: 例如：secret
    controllerPublishSecretNamespace:
      #label: Controller Publish Secret Namespace 
      placeholder: 例如：default
    driver:
      label: 驱动
      placeholder: 例如：driver.longhorn.io
    label: CSI（不支持）
    nodePublishSecretName:
      #label: Node Publish Secret Name 
      placeholder: 例如：secret
    nodePublishSecretNamespace:
      #label: Node Publish Secret Namespace 
      placeholder: 例如：default
    nodeStageSecretName:
      #label: Node Stage Secret Name 
      placeholder: 例如：secret
    nodeStageSecretNamespace:
      #label: Node Stage Secret Namespace 
      placeholder: 例如：default
    volumeAttributes:
      add: 添加卷参数
    volumeHandle:
      #label: Volume Handle 
      placeholder: 例如：pvc-xxxx
  customize:
    accessModes:
      label: 访问模式
      readOnlyMany: 多节点只读
      readWriteMany: 多节点读写
      readWriteOnce: 单节点读写
    affinity:
      #label: Node Selectors
      addLabel: 添加 Node Selector
    assignToStorageClass:
      label: 分配给存储类
    label: 自定义
    mountOptions:
      addLabel: 添加选项
      label: 挂载选项
  fc:
    label: Fibre Channel（不支持）
    lun:
      #label: Lun
      placeholder: 例如：2
    targetWWNS:
      add: 添加模板WWN
    wwids:
      add: 添加 WWID
  flexVolume:
    driver:
      label: 驱动
      placeholder: 例如：driver
    label: Flex Volume（不支持）
    options:
      add: 添加选项
  flocker:
    datasetName:
      label: 数据集名称
      placeholder: 例如：dataset
    datasetUUID:
      label: 数据集 UUID
      placeholder: 例如：uuid
    label: Flocker（不支持）
  gcePersistentDisk:
    #label: Google Persistent Disk
    persistentDiskName:
      label: Disk 名称
      placeholder: 例如：abc
  glusterfs:
    endpoints:
      label: Endpoints
      placeholder: 例如：glusterfs-cluster
    label: Gluster Volume（不支持）
    path:
      label: 路径
      placeholder: 例如：kube-vol
  hostPath:
    label: 主机路径
    mustBe:
      anything: '任意路径：不需要检查目标路径'
      directory: 一个文件夹，如果该文件夹不存在，则自动创建一个文件夹
      existingBlock: 一个已有的block device
      existingCharacter: 一个已有的character device
      existingDirectory: 一个已有的文件夹
      existingFile: 一个已有的文件
      existingSocket: 一个已有的socket
      file: 一个文件，如果该文件不存在，则自动创建一个文件
      label: 节点上的路径必须是：
    pathOnTheNode:
      label: 节点上的路径
      placeholder: 例如：/mnt/disks/ssd1
  iscsi:
    chapAuthDiscovery:
    #label: Chap Auth Discovery
    chapAuthSession:
    initiatorName:
    #label: Chap Auth Session
    iqn:
    #label: Initiator Name
    #placeholder: iqn.1994-05.com.redhat:1df7a24fcb92
    iscsiInterface:
      #label: iSCSI Interface
      placeholder: 例如：interface
    label: iSCSI Target（不支持）
    #label: IQN
    #placeholder: iqn.2001-04.com.example:storage.kube.sys1.xyz
    lun:
      #label: Lun
      placeholder: 例如：2
    portals:
      add: 添加Portal
    targetPortal:
      label: 模板Portal
      placeholder: 例如：portal
  local:
    label: 本地
    path:
      label: 路径
      placeholder: 例如：/mnt/disks/ssd1
  longhorn:
    options:
      addLabel: 添加
      label: 选项
    #label: Longhorn
    volumeHandle:
      #label: Volume Handle
      placeholder: 例如：pvc-xxxx
  nfs:
    #label: NFS Share
    path:
      label: 路径
      placeholder: 例如：/var
    server:
      label: Server IP 地址
      placeholder: 例如：10.244.1.4
  photonPersistentDisk:
    label: Photon Volume（不支持）
    pdId:
      #label: PD ID
      placeholder: 例如：abc
  pluginConfiguration:
    label: 插件配置信息
  portworxVolume:
    label: Portworx Volume（不支持）
    volumeId:
      #label: Volume ID
      placeholder: 例如：abc
  quobyte:
    group:
      label: 用户组
      placeholder: 例如：abc
    label: Quobyte Volume（不支持）
    registry:
      label: 仓库
      placeholder: 例如：abc
    user:
      label: 用户名
      placeholder: 例如：root
    volume:
      label: Volume
      placeholder: 例如：vol
  rbd:
    image:
      label: 镜像
      placeholder: 例如：image
    keyRing:
      #label: Key Ring
      placeholder: 例如：/etc/ceph/keyring
    label: Ceph RBD（不支持）
    pool:
      #label: Pool
      placeholder: 例如：rbd
    user:
      label: 用户
      placeholder: 例如：root
  scaleIO:
    gateway:
      #label: Gateway
      placeholder: 例如：https://localhost:443/api
    label: ScaleIO Volume（不支持）
    protectionDomain:
      #label: Protection Domain
      placeholder: 例如：pd01
    sslEnabled:
      label: 启用SSL
    storageMode:
      #label: Storage Mode
      placeholder: 例如：ThinProvisioned
    storagePool:
      label: 存储池
      placeholder: 例如：sp01
    system:
      label: 系统
      placeholder: 例如：scaleio
    volumeName:
      #label: Volume Name
      placeholder: 例如：vol-0
  shared:
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    monitors:
      add: 添加监控
    partition:
      label: 分区
      placeholder: 例如：1; 0
    readOnly:
      label: 只读
    secretName:
      label: 密钥名称
      placeholder: 例如：secret
    secretNamespace:
      label: 密钥命名空间
      placeholder: 例如：default
  storageos:
    label: StorageOS（不支持）
    volumeName:
      label: 卷名称
      placeholder: 例如：vol
    volumeNamespace:
      label: 卷命名空间
      placeholder: 例如：default
  vsphereVolume:
    storagePolicyId:
      label: 存储策略ID
      placeholder: 例如：sp1
    storagePolicyName:
      label: 存储策略名称
      placeholder: 例如：sp
    #label: VMWare vSphere 卷
    volumePath:
      label: 卷路径
      placeholder: 例如：/
persistentVolumeClaim:
  accessModes: 访问模式
  capacity: 容量
  customize:
    accessModes:
      readOnlyMany: 多节点只读
      readWriteMany: 多节点读写
      readWriteOnce: 单节点读写
    label: 自定义
  source:
    label: 资源
    options:
      existing: 使用已有的持久卷(PV)
      new: 使用存储类创建新的持久卷(PV)
  status:
    label: 状态
  storageClass: 存储类
  useDefault: 使用默认存储类
  volumeClaim:
    label: 卷声明
    persistentVolume: 持久卷
    requestStorage: 需要的存储大小
    storageClass: 存储类
  volumeName: 持久卷名称
  volumes: 持久卷
podAffinity:
  addLabel: 添加 Pod 选择器
prefs:
  advanced: 高级选项
  dateFormat:
    label: 日期格式
  dev:
    label: 启用开发工具
  formatting: 格式
  helm:
    "false": 只显示正式发布的版本
    #label: Helm Charts

    "true": 包括预发布的版本
  hideDesc:
    label: 隐藏所有类型说明框
  keymap:
    emacs: 'Emacs'
    label: YAML 编辑器选择
    sublime: '默认'
    vim: 'Vim'
  landing:
    ember: Rancher UI
    label: 默认登录页面
    vue: 仪表盘
  perPage:
    label: 每页行数
    value: "{count, number}"
  theme:
    auto: 自动
    autoDetail: 选择自动设置，将会在晚 6 点到次日早 6 点间自动切换到黑色主题。
    dark: 深色
    label: 主题
    light: 浅色
  timeFormat:
    label: 时间格式
  title: 用户偏好设置
  clusterToShow:
    label: 在侧边菜单中显示的集群数量
principal:
  error: 无法获取信息
  loading: 加载中&hellip;
  loginName: 用户名
  name: 名称
  type: 类型
probe:
  checkInterval:
    label: 检查间隔
    placeholder: '默认值是10秒'
  command:
    label: 运行命令
    placeholder: 例如：cat /tmp/health
  failureThreshold:
    label: 失败阈值
    placeholder: '默认值是3次'
  httpGet:
    headers:
      label: 请求头
    path:
      label: 请求路径(Path)
      placeholder: 例如：/healthz
    port:
      label: 检查端口
      placeholder: 例如：80
      placeholderDuex: 例如：25
  initialDelay:
    label: 初始延迟
    placeholder: '默认值是'
  successThreshold:
    label: 成功阈值
    placeholder: '默认值是1'
  timeout:
    label: 超时
    placeholder: '默认值是3'
  type:
    label: 检测类型
    placeholder: 选择检查类型
product:
  apps: 应用市场
  auth: 用户及认证方式
  backup: 备份
  cis: CIS 基线测试
  clusterGroup: 集群应用
  clusterManagement: 集群管理
  ecm: 集群管理员
  explorer: 集群浏览器
  fleet: Fleet
  gatekeeper: OPA Gatekeeper
  globalGroup: 全局应用
  harvester: Harvester
  harvesterManager: 虚拟化管理
  istio: Istio
  logging: 日志
  longhorn: Longhorn
  manager: 管理集群
  mcapps: 多集群应用
  monitoring: 监控
  settings: 全局设置
prometheusRule:
  alertingRules:
    addLabel: 添加告警
    annotations:
      description:
        input: 描述注释值
        label: 描述
      label: 注释
      message:
        input: 消息注释值
        label: 消息
      runbook:
      #input: Runbook URL Annotation Value
      #label: Runbook URL
      #summary:
      #input: Summary Annotation Value
      #label: Summary
    bannerText: '在触发告警时，注释和标签将被传递给配置的 alertmanager，以允许它们构造通知信息并发送给配置的接收者。'
    for:
      label: 告警触发等待时间
      #placeholder: '60'
    label: 高级规则
    labels:
      label: 标签
      severity:
        choices:
          critical: 重要
          label: 严重性标签值
          none: none
          warning: 警告
        label: 严重程度
    name: 告警名称
    removeAlert: 删除告警
  groups:
    add: 添加规则组
    groupInterval:
      label: 覆盖组间隔
      placeholder: "60"
    groupRowLabel: 规则组 {index}
    label: 规则组
    name: 组名称
    none: 请添加至少一个规则组，其中至少包含一个警告或一个记录规则。
    removeGroup: 删除组
    responseStrategy:
      label: 部分响应策略
  promQL:
    label: PromQL 表达式
  recordingRules:
    addLabel: 添加记录
    label: 记录规则
    labels: 标签
    name: 时间序列的名称
    removeRecord: 删除记录
promptRemove:
  andOthers: "{count, plural,\n=0 {.}\n=1 {，还有另一个}\nother {, 还有其他{count}个}\n}"
  attemptingToRemove: "您在尝试删除 {type}"
  confirmName: "Enter <b>{nameToMatch}</b> below to confirm:"
  protip: "提示：按住 {alternateLabel} 键同时单击 delete 以绕过此确认"
rancherAlertingDrivers:
  msTeams: 启用Microsoft Teams通知
  selectOne: 你必须选择以下至少一个选项。
  sms: 启用短信通知
rbac:
  authn-manage:
    description: 运行用户启用、编辑或禁用所有的认证方式。
    label: 配置认证方式
  base:
    label: 登录权限
  catalogs-manage:
    description: 允许用户添加、编辑和删除应用。
    label: 配置应用
  catalogs-use:
    description: 允许用户查看和部署应用中的模板。 普通用户默认拥有此权限。
    label: 使用应用
  clusters-create:
    description: 允许用户创建集群，并成为该集群的所有者（owner）。
    label: 创建集群
  clusters-manage:
    description: 允许用户管理所有集群，包括他们不是成员的集群。
    label: 管理所有集群
  clusterscans-manage:
    description: 允许用户运行新建的CIS集群扫描和管理现有的CIS集群扫描。
    label: 管理CIS集群扫描
  clustertemplates-create:
    description: 允许用户创建RKE集群模板，并成为该模板的所有者（owner）。
    label: 创建RKE集群模板
  displayRole:
    fleetworkspace-admin: 管理员
    fleetworkspace-member: 成员
    fleetworkspace-readonly: 只读用户
  features-manage:
    description: 允许用户通过功能标志设置来启用和禁用自定义功能。
    label: 配置功能标记
  globalRoles:
    assignOnlyRole: 已分配该角色
    role:
      admin:
        description: 管理员可以完全控制整个安装和所有集群中的所有资源。
        label: 管理员
      restricted-admin:
        description: 受限管理员可以完全控制所有下游集群的所有资源，但不能访问本地集群。
        label: 受限管理员
      read-only-pandaria:
        label: 只读管理员
        description: 只读管理员可以访问所有下游集群中的所有资源，但不能访问local集群
    types:
      builtin:
        description: 额外的角色来定义更搞细粒度的权限模型。
        label: 内置角色
      custom:
        description: 不是Rancher创建的角色
        label: 自定义
      global:
        description: |-
          控制{isUser, select,
          true {user}
          false {group}}有什么权限来管理整个{appName}的安装。
        label: 全局权限
    unknownRole:
      description: 无描述
  kontainerdrivers-manage:
    description: 允许用户新建集群驱动，并成为该集群驱动的所有者（owner）。
    label: 创建集群驱动
  nodedrivers-manage:
    description: 允许用户启用、配置和删除所有节点驱动设置。
    label: 配置集群驱动
  nodetemplates-manage:
    description: 允许用户定义、编辑和删除节点模板。
    label: 管理节点模板
  nodetemplates-use:
    description: 允许用户使用任何现有的节点模板来部署新的节点。
    label: 使用节点模板
  podsecuritypolicytemplates-manage:
    description: 允许用户定义、编辑和删除Pod安全策略。
    label: 管理Pod安全策略（PSP）
  roleBinding:
    add: 添加成员
    noData: 没有与此资源相关联的成员。
    role:
      label: 角色
    user:
      label: 用户
  roles-manage:
    description: 允许用户定义、编辑和删除用户角色。
    label: 管理用户角色
  roletemplate:
    label: 角色
    locked:
      label: 锁定
      no: 否
      yes: '是：新的绑定不允许使用这个角色'
    newUserDefault:
      no: 否
      tooltip: 这并不影响任何已经存在的角色的绑定。
    subtypes:
      CLUSTER:
        createButton: 创建集群角色
        defaultLabel: 集群创建者
        label: 集群
        yes: "是：创建新集群的默认角色"
      GLOBAL:
        createButton: 创建全局角色
        defaultLabel: 新用户的默认角色
        label: 全局
        yes: "是：新用户的默认角色"
      NAMESPACE:
        createButton: 创建项目或命名空间角色
        defaultLabel: 项目创建者
        label: 项目或命名空间
        yes: "是：创建项目或命名空间的默认角色"
      RBAC_CLUSTER_ROLE:
        label: 集群角色
      RBAC_ROLE:
        label: 角色
      noContext:
        label: 没有内容
    tabs:
      grantResources:
        label: 授予资源
        tableHeaders:
          apiGroups: API组
          nonResourceUrls: 非资源URL
          resources: 资源
          verbs: 操作
  settings-manage:
    description: 允许用户管理Rancher配置。
    label: 管理Rancher配置
  user:
    description: 普通用户可以创建新的集群并管理他们被授予访问权的集群和项目。
    label: 普通用户
  user-base:
    description: User-Base 用户只拥有登录权限。
    label: User-Base 用户
  users-manage:
    description: 允许用户为所有用户创建、删除和设置密码。
    label: 管理用户
  view-rancher-metrics:
    description: 允许用户通过API查看Metrics。
    label: 查看Rancher指标
resourceDetail:
  detailTop:
    annotations: 注释
    created: 已创建
    deleted: 已删除
    description: 描述
    hideAnnotations: "{annotations, plural,\n=1 {Hide 1 annotation}\nother {Hide {annotations} annotations}}"
    hideLabels: 隐藏系统标签
    labels: 标签
    name: 名称
    ownerReferences: "{count, plural,\n=1 {Owner}\nother {Owners}}"
    showAnnotations: "{annotations, plural,\n=1 {Show 1 annotation}\nother {Show {annotations} annotations}}"
    showLabels: 显示全部标签
  header:
    clone: "从 {subtype} {name} 克隆"
    create: 创建 {subtype}
    edit: "{subtype} {name}"
    stage: "Stage from {subtype} {name}"
    view: "{subtype} {name}"
  masthead:
    config: 配置
    #age: Age
    defaultBannerMessage:
      error: 此资源当前处于错误状态，但没有可用的详细消息。
      transitioning: 此资源当前处于转换状态，但没有可用的详细消息。
    detail: 详情
    #yaml: YAML
    managedWarning: |-
      This {type} is managed by {hasName, select,
        no {a {managedBy} app}
        yes {the {managedBy} app {appName}}}; 在此所做的更改可能会在应用程序下次更改时被覆盖。
    namespace: 命名空间
    project: 项目
    sensitive:
      hide: 隐藏敏感信息
      show: 显示敏感信息
    workspace: 工作空间
resourceList:
  head:
    create: 创建
    createFromYaml: 使用 YAML 文件创建
    createResource: "创建 {resourceName}"
resourceTable:
  groupBy:
    namespace: 以命名空间分组
    none: 平面列表
    project: 以项目分组
  groupLabel:
    cluster: "<span>集群：</span> {name}"
    machinePool: "<span>节点池</span> {name}"
    namespace: "<span>命名空间：</span> {name}"
    notInANamespace: 不在命名空间内
    notInAProject: 不在项目内
    notInAWorkspace: 不在工作空间内
    project: "<span>项目：</span> {name}"
    workspace: "<span>工作空间:</span> {name}"
  machinePool: <span>节点池</span> {name}
  namespace: <span>命名空间：</span> {name}
  notInANamespace: 不在命名空间内
  notInAProject: 不在项目内
  notInAWorkspace: 不在工作空间内
  project: <span>项目：</span> {name}
  workspace: <span>工作空间:</span> {name}
resourceTabs:
  conditions:
    tab: 条件
  events:
    tab: 最近事件
  related:
    tab: 相关资源
    #from: Referred To By
    #to: Refers To
resourceYaml:
  buttons:
    continue: 继续编辑
    diff: 显示差异
  errors:
    namespaceRequired: 这个资源是有命名空间的，所以必须提供一个命名空间。
rioConfig:
  configure:
    description: 描述
    helpText:
      listItem1: Kubernetes 的应用部署引擎
      listItem2: "Rio 使 DevOps 更快、更容易地构建、测试、部署、扩展和版本无状态应用。"
    requirements:
      header: 主机要求
      helpText:
        listItem1: 至少 1 核心 CPU
        listItem2: 至少 2 GB 内存
  #header: Rio
  yaml:
    buttonText: 自定义
secret:
  authentication: 身份验证
  basic:
    password: 密码
    username: 用户名
  certificate:
    certificate: 证书
    cn: 域名
    expires: 到期
    issuer: Issuer
    plusMore: "+ {n} 更多"
    privateKey: 私钥
  data: 数据
  initials:
    'bootstrap.kubernetes.io/token': 'Boot'
    'fleet.cattle.io/cluster-registration-values': 'F'
    'helm.sh/release.v1': 'Helm'
    'istio.io/key-and-cert': 'Ist'
    'kubernetes.io/basic-auth': 'HTTP'
    'kubernetes.io/dockercfg': 'R'
    'kubernetes.io/dockerconfigjson': 'R'
    'kubernetes.io/service-account-token': 'SAT'
    'kubernetes.io/ssh-auth': 'SSH'
    'kubernetes.io/tls': 'TLS'
    'opaque': 'O'
    'provisioning.cattle.io/cloud-credential': 'CC'
  registry:
    address: 仓库类型
    domainName: 仓库地址
    password: 密码
    username: 用户名
  relatedWorkloads: 相关的工作负载
  serviceAcct:
    ca: CA 证书
    token: Token
  ssh:
    keys: Keys
    private: 私钥
    public: 公钥
  type: 类型
  types:
    'bootstrap.kubernetes.io/token': 'Bootstrap Token'
    'fleet.cattle.io/cluster-registration-values': 'Fleet 集群'
    'helm.sh/release.v1': 'Helm 版本'
    'istio.io/key-and-cert': 'Istio 证书'
    'kubernetes.io/basic-auth': 'HTTP Basic Auth'
    #'opaque': 'Opaque'
    #'kubernetes.io/service-account-token': 'Svc Acct Token'
    'kubernetes.io/dockercfg': '仓库'
    'kubernetes.io/dockerconfigjson': '仓库'
    'kubernetes.io/ssh-auth': 'SSH 密钥'
    'kubernetes.io/tls': 'TLS 证书'
    'provisioning.cattle.io/cloud-credential': '云凭证'
selectOrCreateAuthSecret:
  basic:
    password: 密码
    username: 用户名
  chooseExisting: "选择一个已有的密钥"
  createBasic: 创建一个新的HTTP Basic Auth 密钥
  createSsh: 创建一个新的SSH密钥对
  label: 认证
  namespaceGroup: "命名空间：{name}"
  options:
    basic: HTTP Basic Auth
    custom: 密钥名称
    none: 无
    ssh: SSH 密钥
  ssh:
    privateKey: 私钥
    publicKey: 公钥
servicePorts:
  header:
    label: 端口规则
  rules:
    listening:
      label: 监听端口
      placeholder: 例如：8080
    name:
      label: 端口名称
      placeholder: 例如：myport
    node:
      label: 节点端口
      placeholder: 例如：80
    protocol:
      label: 协议
    target:
      label: 目标端口
      placeholder: 例如：80 或 http
serviceTypes:
  clusterip: 集群 IP 地址
  externalname: 外部 DNS 名称
  headless: Headless
  loadbalancer: 负载均衡
  nodeport: 节点端口
servicesPage:
  affinity:
    actionLabels:
      clientIp: 客户端 IP
      none: 未配置会话保持
    helpText: 根据其源 IP 将连接映射到一个一致的目标
    label: 会话保持
    timeout:
      label: 会话粘滞时间
      placeholder: 以秒为单位，例如 10800 表示 10800 秒，即 48 分钟
  anyNode: 任何节点
  externalName:
    define: DNS 名称
    helpText: "外部名称的目的是指定一个 DNS 名称。如果要硬编码一个 IP 地址，请使用 headless 服务。"
    input:
      label: DNS名称
    label: 外部 DNS 服务名称
    placeholder: 例如：my.database.example.com
  ips:
    clusterIpHelpText: Cluster IP 地址必须在为 API 服务器配置的 CIDR 范围内。
    define: 定义服务端口
    external:
      label: 外部 IP
      placeholder: 例如：1.1.1.1
      protip: 集群中哪些节点也将接受该服务的流量的 IP 地址列表
    input:
      label: 集群 IP
      placeholder: 例如：10.43.XXX.XXX
    label: 监听 IP
  labelsAnnotations:
    label: 标签和注释信息
  pods:
  #label: Pods
  ports:
    label: 端口
  selectors:
    helpText: "如果没有创建选择器，则必须手动输入端点。"
    label: 选择器
    matchingPods:
      matchesSome: "{matched, plural,\n  =0 {与{total, number}个pods中的0个匹配。如果没有创建选择器，必须进行手动端点。}\n  =1 {与{total, number}个pods中的1个匹配： \"{sample}\"}\n  other {与{total, number}个pods中的{matched, number}个匹配，包括 \"{sample}\"。}\n}"
  serviceTypes:
    clusterIp:
      abbrv: IP
      description: 在集群内部 IP 上公开服务。选择此值使服务只能从集群内部访问。这是默认类型。
      label: 集群 IP
    externalName:
      abbrv: EN
      description: "将服务与`externalName`字段的内容(如 foo.bar.example.com)进行映射，返回一个带有其值的 CNAME 记录。没有设置任何形式的代理。"
      label: 外部 DNS 服务名称
    headless:
      abbrv: H
      description: 既没有定义集群 IP，也没有定义负载均衡器。这些是用来与 Kubernetes 实现之外的其他服务发现机制对接的。没有分配集群 IP，kube-proxy 也不处理这些服务。
      label: Headless
    loadBalancer:
      abbrv: LB
      description: 使用云提供商的负载平衡器向外部暴露服务。
      label: 负载均衡器
    nodePort:
      abbrv: NP
      description: "在每个节点的 IP 上以静态端口（`NodePort`）公开服务。您将能够通过请求`<NodeIP>:<NodePort>`从集群外部联系这种类型的服务。"
      label: 节点端口
  typeOpts:
    label: 服务类型
sortableTable:
  actionAvailability:
    selected: "已选择 {actionable} 项"
    some: "一共有 {total} 项，符合条件的有 {actionable} 项"
  noActions: 没有可用的操作
  noData: 没有匹配项
  noRows: 没有内容显示
  paging:
    generic: "{pages, plural,\n=0 {无项目}\n=1 {{count}项}\nother {{count}项中的第{from} - {to}项}}"
    resource: "{pages, plural,\n=0 {No {pluralLabel}}\n=1 {{count} {count, plural, =1 {{singularLabel}} other {{pluralLabel}}}}\nother {{from} - {to} of {count} {pluralLabel}}}"
  search: Filter
storageClass:
  actions:
    resetDefault: 重设默认配置
    setAsDefault: 设置为默认配置
  aws-ebs:
    availabilityZone:
      automatic: '自动选择：选择节点所在区域作为可用区'
      label: 可用区
      manual: '手动选择：自行指定一个可用区'
      placeholder: 例如：us-east-1d, us-east-1c
    encryption:
      disabled: 不启用
      enabled: 启用
      label: 加密
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    keyId:
      automatic: '自动：生成一个密钥'
      label: 用于加密的KMS密钥ID
      manual: '手动：使用一个指定的密钥（full ARN）'
    title: Amazon EBS磁盘
    volumeType:
      label: 存储卷类型
      #gp2: GP2 - General Purpose SSD
      #io1: IO1 - Provisioned IOPS SSD
      #st1: ST1 - Throughput-Optimized HDD
      #sc1: SC1 - Cold-Storage HDD
      provisionedIops:
        #label: Provisioned IOPS
        suffix: 每秒，每GB
  azure-disk:
    kind:
      dedicated: 独享 (unmanaged disk)
      label: 类型
      managed: 管理
      shared: 共享 (unmanaged disk)
    storageAccountType:
      label: Storage Account类型
      placeholder: 例如：Standard_LRS
    title: Microsoft Azure磁盘
  azure-file:
    location:
      label: 位置
      placeholder: 例如：eastus
    skuName:
      label: Sku名称
      placeholder: 例如：Standard_LRS
    storageAccount:
      #label: Storage Account
      placeholder: 例如：azure_storage_account_name
    title: Azure文件
  cinder:
    availabilityZone:
      automatic: "自动选择：选择节点所在区域作为可用区"
      label: 可用区
      manual:
        label: "手动选择：自行指定一个可用区"
        placeholder: 例如：nova
    title: Openstack Cinder Volume（不支持）
    volumeType:
      label: 卷类型
      placeholder: 例如：fast
  custom:
    addLabel: 添加参数
  customize:
    allowVolumeExpansion:
      disabled: 不允许
      enabled: 允许
      label: 允许扩展存储卷
    label: 自定义
    mountOptions:
      addlabel: 添加选项
      label: 挂载存储卷选项
    reclaimPolicy:
      delete: 删除存储卷时，同时删除卷和底层设备。
      label: 回收策略
      retain: 保留存储卷，以通过手动清理。
    volumeBindingMode:
      label: 存储卷卷绑定模式
      later: 创建了使用PersistentVolumeClaim的Pod之后，再绑定并配置一个持久卷。
      now: 在创建PersistentVolumeClaim时，立即绑定并配置一个持久卷
  gce-pd:
    availabilityZone:
      automatic: '自动选择：选择节点所在区域作为可用区'
      label: 可用区
      manual: '手动选择：自行指定一个可用区'
      placeholder: 例如：us-east-1d和us-east-1c
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    replicationType:
      label: 副本类型
      regional: 区域
      zonal: 可用区
    title: Google Persistent磁盘
    volumeType:
      label: 存储卷类型
      ssd: SSD
      standard: 标准
  glusterfs:
    clusterId:
      label: 集群ID
      placeholder: 例如：630372ccdc720a92c681fb928f27b53f
    gidMax:
      label: GID MAX
      placeholder: 例如：50000
    gidMin:
      label: GID MIN
      placeholder: 例如：40000
    restUrl:
      label: REST URL
      placeholder: 例如：http://127.0.0.1:8081
    restUser:
      label: REST 用户
      placeholder: 例如：admin
    restUserKey:
      label: REST 用户密钥
      placeholder: 例如：password
    secretName:
      label: 密钥名称
      placeholder: 例如：heketi-secret
    secretNamespace:
      label: 密钥所在的命名空间
      placeholder: 例如：default
    title: Gluster Volume（不支持）
    volumeType:
      label: 卷类型
      placeholder: 例如：eplicate:3
  longhorn:
    #title: Longhorn
    addLabel: 添加参数
  no-provisioner:
    title: 本地存储（不支持）
  parameters:
    label: 参数
  portworx-volume:
    aggregationLevel:
      label: 聚合水平
      placeholder: 例如：0
    blockSize:
      label: 区块大小
      placeholder: 例如：32
    ephemeral:
      #label: Ephemeral
      placeholder: 例如：true
    filesystem:
      label: 文件系统类型
      placeholder: 例如：ext4
    ioPriority:
      label: I/O优先级
      placeholder: 例如：low
    repl:
      label: Repl
      placeholder: 例如：1; 0 for entire device
    snapshotsInterval:
      label: 快照间隔
      placeholder: 例如：70
    title: Portworx Volume（不支持）
  quobyte:
    adminSecretName:
      label: Admin密钥名称
      placeholder: 例如：quobyte-admin-secret
    adminSecretNamespace:
      label: Admin密钥所在的命名空间
      placeholder: 例如：kube-system
    group:
      label: 用户组
      placeholder: 例如：root
    quobyteApiServer:
      label: Quobyte API Server
      placeholder: 例如：http://138.68.74.142:7860
    quobyteConfig:
      label: Quobyte配置
      placeholder: 例如：BASE
    quobyteTenant:
      label: Quobyte租户角色
      placeholder: 例如：DEFAULT
    registry:
      label: 仓库IP地址
      placeholder: 例如：138.68.74.142:7861
    title: Quobyte Volume （不支持）
    user:
      label: 用户
      placeholder: 例如：root
  rbd:
    adminId:
      #label: Admin ID
      placeholder: 例如：kube
    adminSecret:
      label: Admin密钥
      placeholder: 例如：Secret
    adminSecretNamespace:
      label: Admin密钥所在的命名空间
      placeholder: 例如：kube-system
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    imageFeatures:
      label: 镜像功能
      placeholder: 例如：layering
    imageFormat:
      label: 镜像格式
      placeholder: 例如：2
    monitors:
      label: 监控
      placeholder: 例如：10.16.153.105:6789
    pool:
      label: 池
      placeholder: 例如：kube
    title: Ceph RBD（不支持）
    userId:
      label: 用户ID
      placeholder: 例如：kube
    userSecretName:
      label: 用户密钥名称
      placeholder: 例如：ceph-secret-user
    userSecretNamespace:
      label: 用户密钥所在的命名空间
      placeholder: 例如：default
  scaleio:
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：xfs
    gateway:
      label: 网关
      placeholder: 例如：https://192.168.99.200:443/api
    protectionDomain:
      #label: Protection Domain
      placeholder: 例如：pd0
    readOnly:
      label: 只读
    secretRef:
      #label: Secret Ref
      placeholder: 例如：sio-secret
    storageMode:
      label: 存储模式
      #thin: Thin Provisioned
      #thick: Thick Provisioned
    storagePool:
      label: 存储池
      placeholder: 例如：sp1
    system:
      label: 系统
      placeholder: 例如：scaleio
    title: ScaleIO Volume（不支持）
  storageos:
    adminSecretName:
      label: Admin密钥名称
      placeholder: 例如：storageos-secret
    adminSecretNamespace:
      label: Admin密钥所在的命名空间
      placeholder: 例如：default
    description:
      label: 描述
      placeholder: 例如：Kubernetes volume
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    pool:
      label: 池
      placeholder: 例如：default
    title: StorageOS（不支持）
  vsphere-volume:
    cacheReservation:
      label: 预留缓存的大小
      placeholder: 例如：20
    datastore:
      #label: Datastore
      placeholder: 例如：VSANDatastore
    diskFormat:
      label: 磁盘格式
      #thin: Thin
      #zeroedthick: Zeroed Thick
      #eagerzeroedthick: Eager Zeroed Thick
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext3
    hostFailuresToTolerate:
      label: 容忍主机失败的次数
      placeholder: 例如：2
    storagePolicyName:
      label: 存储策略名称
      placeholder: 例如：gold
    title: VMWare vSphere卷
suffix:
  cores: Cores
  cpus: CPUs
  gb: GB
  ib: iB
  mib: MiB
  milliCpus: mili CPUs
  percent: "%"
  #percent: "%"
  #cpus: CPUs
  #ib: iB
  revisions: "{count, plural,\n  =1 { 版本 }\n  other { 版本 }\n}"
  sec: Sec
  seconds: "{count, plural,\n  =1 { 秒 }\n  other { 秒 }\n}"
  times: "{count, plural,\n  =1 { 次 }\n  other { 次 }\n}"
##############################
### Support Page
##############################
support:
  community:
    addSubscription: 添加订阅ID
    learnMore: 了解更多关于SUSE Rancher支持的信息
    linksTitle: 社区支持
    register: 已经购买支持？请添加您的SUSE订阅ID。
    title: SUSE Rancher 提供世界一流的支持
  promos:
    four:
      text: 利用我们与众多的Kubernetes厂商、操作系统和开源软件的认证兼容性。
      title: 自由创新
    one:
      text: 我们提供严格定义的服务水平协议，并提供全天候的支持选项。
      title: 全天候7x24小时支持
    three:
      text: 我们专注于发现任何问题的根源，无论它是否与Rancher产品、Kubernetes、Docker或你的底层基础设施有关。
      title: 问题排查
    two:
      text: 满怀信心地运行 SUSE Rancher 产品，因为我们知道构建这些产品的开发人员可以快速解决问题。
      title: 解决问题
  suse:
    title: "好消息--你得到了保障"
tableHeaders:
  #accessKey: Access Key
  address: 地址
  age: 存活时间
  apiGroup: API 分组
  attachedVM: 被挂载到
  authRoles:
    clusterDefault: 集群创建者默认
    globalDefault: 新用户默认
    projectDefault: 项目创建者默认
  backupTarget: 备份路径
  branch: 分支
  builtIn: 内置
  builtin: 内建
  #bundlesReady: Bundles
  bundleDeploymentsReady: 部署
  #chart: Chart
  clusterCreatorDefault: 默认集群创建者
  clusterGroups: 集群组
  #clusterFlow: Cluster Flow
  #clusterOutput: Cluster Output
  clusters: 集群
  clustersReady: 就绪的集群
  #commit: Commit
  condition: 状态
  #cpu: CPU
  date: 日期
  default: 默认
  defaultVersion: 默认版本
  #customVerbs: Custom Verbs
  description: 描述
  destination: 目标
  download: 下载
  effect: 效果
  endpoints: 端点
  expires: 过期时间
  fingerprint: 唯一标识
  #flow: Flow
  gitRepos: Git 代码仓库
  host: 主机
  hostIp: 主机IP
  image: 镜像
  imageSize: 大小
  ingressDefaultBackend: 默认
  ingressTarget: 目标
  internalExternalIp: 外网 IP 地址或内网 IP 地址
  ipAddress: IP 地址
  jobs: Jobs
  key: 密钥
  keys: 数据
  lastSeen: 最后出现
  lastUpdated: 最后更新时间
  loggingOutputProviders: Providers
  machines: 机器
  matches: 匹配
  maxKubernetesVersion: 最大 Kubernetes 版本
  message: 信息
  minKubernetesVersion: 最小 Kubernetes 版本
  name: 名称
  nameDisplay: 显示名称
  nameUnlinked: 名称
  namespace: 命名空间
  namespaceName: 命名空间名称
  namespaceNameUnlinked: 名称
  networkType: 类型
  networkVlan: Vlan ID
  node: 节点
  nodeName: 节点名称
  nodesReady: 就绪节点
  #nodePort: Node Port
  object: 对象
  output: 输出
  p95: 95 百分位数
  persistentVolumeSource: 持久卷源
  phase: 阶段
  podImages: 镜像
  #pods: Pods
  port: 端口
  progress: 进度
  protocol: 协议
  provider: 提供商
  providers: 配置提供商
  publicPorts: 公有端口
  ram: 内存(RAM)
  rbac:
    create: 创建
    delete: 删除
    get: 查询
    list: 列表
    patch: 修改
    update: 更新
    watch: 监控
  ready: 就绪
  reason: 原因
  replicas: 副本数量
  repo: Repo
  reposReady: 就绪的 Repo
  reqRate: 请求频率
  resource: 资源
  resources: 资源
  restarts: 重启
  rioImage: Rio 镜像
  role: 角色
  roles: 角色
  scale: 比例
  scope: 规模
  selector: 选择器
  simpleName: 名称
  simpleScale: 比例
  simpleType: 类型
  started: 已开始
  state: 状态
  status: 状态
  storage: 存储
  storage_class_provisioner: 提供者
  subType: 类型
  subject: 主题
  success: 成功
  summary: 概述
  target: 目标
  targetKind: 目标类型
  targetPort: 目标端口
  targetVm: 目标VM
  type: 类型
  updated: 更新
  upgrade: 升级
  url: URL 地址
  userDisplayName: 显示名称
  userId: 用户 ID
  userStatus: 用户状态
  username: 本地用户名
  value: 值
  version: 版本号
  weight: 权重
  taints: 污点
target:
  router:
    label: 路由
    placeholder: 选择路由
  service:
    label: 服务（svc）
    placeholder: 选择服务
  title: 目标
  version:
    label: 版本
    placeholder: 选择版本
typeDescription:
  catalog.cattle.io.app: 已安装的应用程序 Apps 是通过 Rancher catalog 或通过 Helm CLI 安装的 Helm 3 charts。
  catalog.cattle.io.clusterrepo: Chart 仓库是一个 Helm 仓库或 Rancher 的基于 git 的应用商店，它提供了集群中可用的 Chart 列表。
  catalog.cattle.io.operation: 操作是指最近应用于集群的 Helm 操作列表。
  cis.cattle.io.clusterscan: 创建扫描以根据定义的配置文件在集群上触发 CIS 扫描。扫描完成后会创建一份报告。
  #Map of
  #type: Description to be shown on the top of list view describing the type.
  #      Should fit on one line.
  #      If you link to anything external, it must have
  #      target="_blank" rel="noopener noreferrer nofollow"
  cis.cattle.io.clusterscanbenchmark: 基准版本是指使用 kube-bench 运行的基准名称，以及该基准的有效配置参数。
  cis.cattle.io.clusterscanprofile: 配置文件是 CIS 扫描的配置，也就是要使用的基准版本和该基准中要跳过的任何特定测试。
  cis.cattle.io.clusterscanreport: 报告是对集群进行 CIS 扫描的结果。
  logging: 要收集和发送日志，您需要定义流和输出。流定义要收集、筛选哪些日志，以及要发送输出的日志。如果希望收集集群中的所有日志，可以创建一个 ClusterFlow。输出可以在命名空间级别定义，也可以在集群级别定义，并供这两种流类型使用。
  logging.banzaicloud.io.clusterflow: 集群流定义了要从整个集群收集和过滤哪些日志，以及发送输出哪些日志。集群流需要部署在 logging operator 所在的命名空间中。
  logging.banzaicloud.io.clusteroutput: 集群输出定义可以将日志发送到哪些日志提供程序，并且只有部署在 logging operator 所在的命名空间中时才有效。
  logging.banzaicloud.io.flow: 流定义要收集和过滤哪些日志，以及要发送输出哪些日志。该流是一个命名空间资源，这意味着只从部署该流的命名空间收集日志。
  logging.banzaicloud.io.output: 输出定义可以将日志发送到哪些日志提供程序。输出需要在与使用它的流相同的命名空间中。
  monitoring.coreos.com.alertmanager: 告警管理器是 deployment 类型运行的服务，其配置将由同一命名空间中的 密文 指定，该 密文 决定了哪些警报应发送给哪个接收者。
  monitoring.coreos.com.podmonitor: A pod monitor defines the group of pods that Prometheus will scrape for metrics. The common way is to use service monitors, but pod monitors allow you to handle any situation where a service monitor wouldn't work.
  monitoring.coreos.com.prometheus: Prometheus 服务器是 deployment 运行的服务，它的刮擦配置和规则是由选定的 ServiceMonitors、PodMonitors 和 PrometheusRules 决定的，它的告警信息将发送给所有选择的具有定制资源配置的 AlertManager。
  monitoring.coreos.com.prometheusrule: Prometheus 规则定义了记录和/或警报规则。记录规则可以预先计算值并保存结果，警报规则允许您定义何时向 AlertManager 发送通知的条件。
  monitoring.coreos.com.servicemonitor: 服务监视器（service monitor ）定义了 Prometheus 将获取的服务组和端点，这是定义指标集合的最常见方法。
  resources.cattle.io.backup: 创建备份是为了基于资源集执行一次性备份或安排重复性备份。
  resources.cattle.io.resourceset: 资源集定义了要在备份中存储哪些 CRD 和资源。
  resources.cattle.io.restore: 创建还原是为了根据备份文件触发对集群的还原。
  node: Kubernetes节点资源展现承载部署的虚拟机或物理机。请进入"管理集群"管理可用机器的生命周期.
typeLabel:
  catalog.cattle.io.app: "{count, plural,\n  one { 已安装的 App }\n  other { 已安装的 Apps }\n}"
  catalog.cattle.io.clusterrepo: "{count, plural,\n  one { Chart 仓库 }\n  other { Chart 仓库 }\n}"
  catalog.cattle.io.operation: "{count, plural,\n  one { 最近的操作 }\n  other { 最近的操作 }\n}"
  catalog.cattle.io.repo: "{count, plural,\n  one { Namespaced Repo }\n  other { Namespaced Repos }\n}"
  chartInstallAction: "{count, plural,\n  one { App }\n  other { Apps }\n}"
  chartUpgradeAction: "{count, plural,\n  one { App }\n  other { Apps }\n}"
  cis.cattle.io.clusterscan: "{count, plural,\n  one { 扫描 }\n  other { 扫描 }\n}"
  cis.cattle.io.clusterscanbenchmark: "{count, plural,\n  one { Benchmark 版本 }\n  other { Benchmark 版本 }\n}"
  cis.cattle.io.clusterscanprofile: "{count, plural,\n  one { 配置文件 }\n  other { 配置文件 }\n}"
  'cluster.x-k8s.io.cluster': "{count, plural,\n  one { CAPI集群 }\n  other { CAPI集群 }\n}"
  endpoints: "{count, plural,\n  one { Endpoint }\n  other { Endpoints }\n}"
  fleet.cattle.io.cluster: "{count, plural,\n  =1 { 集群 }\n  other { 集群 }\n}"
  fleet.cattle.io.clustergroup: "{count, plural,\n  one { 集群组 }\n  other { 集群组 }\n}"
  fleet.cattle.io.gitrepo: "{count, plural,\n  one { Git 仓库 }\n  other {Git 仓库 }\n}"
  group.principal: "{count, plural,\n  one { 组 }\n  other { 组 }\n}"
  harvesterhci.io.cloudtemplate: Cloud 配置模板
  harvesterhci.io.host: 主机
  harvesterhci.io.keypair: SSH 密钥
  harvesterhci.io.management.cluster: Harvester集群
  harvesterhci.io.setting: 设置
  harvesterhci.io.user: 用户
  harvesterhci.io.virtualmachinebackup: 备份
  harvesterhci.io.virtualmachineimage: 镜像
  harvesterhci.io.virtualmachinetemplateversion: 虚拟机模板
  harvesterhci.io.volume: 卷
  k8s.cni.cncf.io.networkattachmentdefinition: 网络
  kubevirt.io.virtualmachine: 虚拟机
  management.cattle.io.authconfig: "{count, plural,\n  one { Auth Provider }\n  other { Auth Providers }\n}"
  'management.cattle.io.cluster': "{count, plural,\n  one { 所有集群 }\n  other { 所有集群 }\n}"
  management.cattle.io.feature: "{count, plural,\n  one { Feature Flag }\n  other { Feature Flags }\n}"
  management.cattle.io.fleetworkspace: "{count, plural,\n  one { 工作空间 }\n  other { 工作空间 }\n}"
  management.cattle.io.setting: "{count, plural,\n  one { 高级设置 }\n  other { 高级设置 }\n}"
  management.cattle.io.token: "{count, plural,\n  one { API Key }\n  other { API Keys }\n}"
  'management.cattle.io.user': "{count, plural,\n  one { 用户 }\n  other { 用户 }\n}"
  monitoring.coreos.com.alertmanager: "{count, plural,\n  one { 告警管理 }\n  other { 告警管理 }\n}"
  monitoring.coreos.com.podmonitor: "{count, plural,\n  one { Pod 监控 }\n  other { Pod 监控 }\n}"
  #pruh-mee-thee-eyes https://www.prometheus.io/docs/introduction/faq/#what-is-the-plural-of-prometheus
  monitoring.coreos.com.prometheus: "{count, plural,\n  one { Prometheus }\n  other { Prometheis }\n}"
  monitoring.coreos.com.prometheusrule: "{count, plural,\n  one { Prometheus 规则 }\n  other { Prometheus 规则 }\n}"
  monitoring.coreos.com.receiver: "{count, plural,\n  one { 接收者 }\n  other { 接收者 }\n}"
  monitoring.coreos.com.route: "{count, plural,\n  one { 通知 }\n  other { 通知 }\n}"
  monitoring.coreos.com.servicemonitor: "{count, plural,\n  one { 服务监控 }\n  other { 服务监控 }\n}"
  monitoring.coreos.com.thanosruler: "{count, plural,\n  one { Thanos 规则 }\n  other { Thanos 规则 }\n}"
  'rancher.cattle.io.cluster': "{count, plural,\n  one { 集群 }\n  other { 集群 }\n}"
  token: "{count, plural,\n  one { API密钥 }\n  other { API密钥 }\n}"
  management.cattle.io.project: 项目
  namespace: 命名空间
  node: 节点
  provisioning.cattle.io.cluster: 集群
unit:
  day: "{count, plural,\n  one { 天 }\n  other { 天 }\n}"
  hour: "{count, plural,\n  one { 小时 }\n  other { 小时 }\n}"
  min: mins
  sec: secs
user:
  detail:
    clusterRoles:
      description: 授予一个用户在某个集群的角色
      label: 集群角色
      tableHeaders:
        cluster: 集群
    generic:
      tableHeaders:
        role: 角色
        #granted: Granted
    globalPermissions:
      adminMessage: 该用户是一个管理员，拥有所有权限
      description: 管理影响整个安装的资源的权限
      label: 全局权限
      tableHeaders:
        permission: 权限
      readOnlyAdminMessage: 此用户是只读管理员并对下级集群对象拥有只读权限
    projectRoles:
      description: 授予一个用户在某个项目的角色
      label: 项目角色
      tableHeaders:
        project: 项目
    username: 用户名
  edit:
    credentials:
      displayName:
        label: 显示名称
        placeholder: 例如：John Smith
      label: 凭证
      userDescription:
        label: 描述
        placeholder: 例如：This account is for John Smith
      username:
        exists: '用户名已被使用。请选择一个新的用户名'
        label: 用户名
        placeholder: 例如：jsmith
  list:
    errorRefreshingGroupMemberships: 刷新小组成员名单时出错，请重试
validation:
  arrayLength:
    between: "\"{key}\" 应该包含 {min} 至 {max} {max, plural, =1 {项} other {项}}"
    exactly: "\"{key}\" 应该包含 {count, plural, =1 {#项} other {#项}}"
    max: "\"{key}\" 应该包含最多 {count} {count, plural, =1 {项} other {项}}"
    min: "\"{key}\" 应该包含最少 {count} {count, plural, =1 {项} other {项}}"
  boolean: "\"{key}\" 必须是一个布尔值"
  chars: "\"{key}\" 包含 {count, plural, =1 {一个无效字符} other {#多个无效字符}}: {chars}"
  custom:
    missing: "{validatorName}不存在校验! 该校验是否存在于自定义校验中？名字的拼写是否正确？"
  dns:
    doubleHyphen: "\"{key}\" 不能包含两个或多个连续的连字符“-”"
    hostname:
      empty: "\"{key}\" 必须至少包含一个字符"
      emptyLabel: "\"{key}\" 不能包含两个连续的点“.”"
      endDot: "\"{key}\" 不能以点“.”结束"
      endHyphen: "\"{key}\" 不能以连字符“-”结束"
      startDot: "\"{key}\" 不能以点“.”开始"
      startHyphen: "\"{key}\" 不能以连字符“-”开始"
      startNumber: "\"{key}\" 不能以数字开始"
      tooLong: "\"{key}\" 的长度不能超过 {max} 个字符数量"
      tooLongLabel: "\"{key}\" 不能包含超过 {max} 字符的部分"
    label:
      emptyLabel: "\"{key}\" 不能为空"
      endHyphen: "\"{key}\" 不能以连字符“-”结束"
      startHyphen: "\"{key}\" 不能以连字符“-”开始"
      startNumber: "\"{key}\" 不能以数字开始"
      tooLongLabel: "\"{key}\" 的长度不能超过 {max} 个字符数量"
  flowOutput:
    both: 需要选择 "输出" 或 "集群输出"。
    global: 需要选择 "集群输出"。
  invalidCron: 无效 cron 调度
  k8s:
    identifier:
      emptyLabel: "\"{key}\" 不能为空"
      emptyPrefix: "\"{key}\" 不能为空"
      endLetter: "\"{key}\" 末位必须是字母或数字"
      startLetter: "\"{key}\" 首位必须是字母或数字"
      tooLongKey: "\"{key}\" 的长度不能超过 {max} 个字符数量"
      tooLongPrefix: "\"{key}\" 前缀不能超过 {max} 个字符数量"
  monitoring:
    route:
      interval: "\"{key}\" 必须是以数字后跟单位(如 1h, 2m, 30s)的格式。"
      match: 必须选择至少一个匹配或匹配正则表达式
  noSchema: 没有找到可以验证的模式
  noType: 无类型可验证
  number:
    between: "\"{key}\" 的长度必须在 {min} 和 {max} 之间"
    exactly: "\"{key}\" 的长度必须是 {val}"
    max: "\"{key}\" 的长度必须小于或等于 {val}"
    min: "\"{key}\" 的长度必须大于或等于 {val}"
  output:
    logdna:
      apiKey: 需要设置一个 "Api 密钥"。
  podAffinity:
    affinityTitle: Pod 亲和性
    antiAffinityTitle: Pod 反亲和性
    matchExpressions:
      operator: Rule [{index}] of {group} {rules} - operator must be one of 'In', 'NotIn', 'Exists', 'DoesNotExist'
      valueMustBeEmpty: Rule [{index}] of {group} {rules} - value must be empty if operator is 'Exists' or 'DoesNotExist'
      valuesMustBeDefined: Rule [{index}] of {group} {rules} - value must be defined if operator is 'In' or 'NotIn'
    preferredDuringSchedulingIgnoredDuringExecution: 优先规则
    requiredDuringSchedulingIgnoredDuringExecution: 需要规则
    topologyKey: Rule [{index}] of {group} {rules} - 拓扑键是必需的。
  port: 端口号的取值范围是1到65535之间的任何数字。
  prometheusRule:
    groups:
      required: 至少需要一个规则组。
      singleAlert: 规则可以包含警告规则或记录规则，但不能同时包含两者。
      valid:
        name: '规则组需要名称 {index}.'
        rule:
          alertName: '规则组{groupIndex}规则{ruleIndex}需要一个警报名称。 '
          expr: '规则组{groupIndex}规则{ruleIndex}需要一个PromQL表达式'
          labels: '规则组{groupIndex}规则{ruleIndex}至少需要一个标签。建议使用严重程度作为标签。'
          recordName: '规则组{groupIndex}规则{ruleIndex}需要一个时间序列名称。'
        singleEntry: '在规则组{index}中至少需要一个警报规则或一个记录规则。'
  required: "\"{key}\"是必填项"
  requiredOrOverride: "\"{key}\" 是必须的或必须允许覆盖的"
  roleTemplate:
    roleTemplateRules:
      missingApiGroup: 你必须为每个资源授予指定一个API组
      missingOneResource: 你必须为每个资源授予至少指定一个资源、非资源URL或API组
      missingResource: 你必须为每个资源授予至少指定一个资源、非资源URL或API组
      missingVerb: 你必须为每个资源授予指定至少一个动作
  service:
    externalName:
      none: '使用外部 DNS 服务时，External Name 是必填项'
    ports:
      name:
        required: "端口规则 [{position}] - 端口名称是必填项"
      nodePort:
        requriedInt: "端口规则 [{position}] - 如果包含节点端口，则节点端口必须是整数值，例如：80"
      port:
        required: "端口规则 [{position}] - 端口是必填项"
        requriedInt: "端口规则 [{position}] - 如果包含端口，则端口必须是整数值，例如：80"
      targetPort:
        between: "端口规则 [{position}] - 目标端口的取值范围是： 1~65535"
        iana: "端口规则 [{position}] - 目标端口必须是 IANA 服务名称或整数值"
        ianaAt: "端口规则 [{position}] - 目标端口 "
        required: "端口规则 [{position}] - 目标端口是必填项"
  stringLength:
    between: "\"{key}\" 的长度必须在 {min} 和 {max} 之间 {max, plural, =1 {字符} other {字符}}"
    exactly: "\"{key}\" 的长度必须是 {count, plural, =1 {#字符} other {#字符}}"
    max: "\"{key}\" 的长度必须小于或等于 {count} {count, plural, =1 {字符} other {字符}}"
    min: "\"{key}\" 的长度必须大于或等于 {count} {count, plural, =1 {字符} other {字符}}"
  targets:
    missingProjectId: 一个目标必须选定一个项目。
wizard:
  back: 返回
  finish: 完成
  next: 下一步
  step: "步骤 {number}:"
wm:
  connection:
    connected: 已连接
    connecting: 正在连接&hellip;
    disconnected: 已断开连接
    error: 错误
  containerLogs:
    clear: 清除
    containerName: "容器： {label}"
    download: 下载
    follow: 回到底部
    noData: 在当前范围内没有日志条目显示
    noMatch: 没有符合当前过滤条件的数据
    previous: 使用前一个容器
    range:
      all: 全部
      hours: "{value, number}\n{value, plural,\n=1 {小时}\nother {小时}\n}"
      label: 显示最后一个
      lines: "{value, number}行"
      minutes: "{value, number} {value, plural,\n=1 {分}\nother {分}\n}"
    search: 过滤条件
    timestamps: 显示时间戳
    wrap: 自动换行
  containerShell:
    clear: 清除
    containerName: "容器：{label}"
    permissionDenied:
      title: 无法打开 Shell 窗口
      message: 无权访问
  kubectlShell:
  #title: "Kubectl: {name}"
workload:
  container:
    command:
      addEnvVar: 添加
      args: 命令 (CMD)
      as: 作为
      command: 入口 (Entrypoint)
      env: 环境变量
      fromResource:
        configMap: 配置映射
        containerName: 容器名称
        key:
          label: 键
          placeholder: "例如：metadata.labels['<KEY>']"
        name:
          label: 变量名
          placeholder: "例如：FOO"
        prefix: 前缀
        secret: 密文
        source:
          label: 源
          placeholder: 例如：my-container
        type: 类型
        value:
          label: 值
          placeholder: 例如：bar
      stdin: 标准输入
      #tty: TTY
      workingDir: 工作目录
    containerName: 容器名称
    healthCheck:
      checkInterval: 检查间隔
      command:
        command: 运行命令
      failureThreshold: 故障阈值
      httpGet:
        headers: 请求头
        path: 请求路径
        port: 检查端口
      initialDelay: 初始延迟
      kind:
        HTTP: HTTP 请求返回成功的状态 (200-399)
        HTTPS: HTTPS 请求返回成功的状态
        exec: 容器内运行的命令以 0 状态退出
        none: 无
        tcp: 成功启动 TCP 连接
      livenessProbe: 存活检查
      livenessTip: 当该检查失败时，将重新启动容器，不建议用于大多数用途。
      noHealthCheck: "没有给容器配置存活、就绪或启动探测器"
      readinessProbe: 就绪检查
      readinessTip: 当该检查失败时，会将容器从服务端点中移除，建议配置该检查。
      startupProbe: 启动检查
      startupTip: 容器在尝试其他健康检查之前，将等待此检查成功。
      successThreshold: 成功阈值
      timeout: 超时时间
    image: 容器镜像
    imagePullPolicy: 拉取镜像策略
    imagePullSecrets: 拉取密钥
    init: 初始化容器
    name: 容器名称
    noPorts: 当前没有配置端口。
    noResourceLimits: 没有配置资源需求。
    ports:
      containerPort: 容器端口
      createService: 服务类型
      hostIP: 主机 IP
      hostPort: 公共主机端口
      listeningPort: 监听端口
      name: 名称
      noCreateService: 不创建服务
      protocol: 协议
    removeContainer: 移除容器
    security:
      addCapabilities: 添加功能
      addGroupIDs: 添加组 ID
      allowPrivilegeEscalation:
        "false": 否
        label: 允许权限提升
        "true": "是，容器可以获得比其父进程更多的权限。"
      dropCapabilities: 弃用 Capabilities
      fsGroup: Filesystem 组
      hostIPC: 使用主机 IPC 命名空间
      hostPID: 只用主机 PID 命名空间
      privileged:
        "false": 否
        label: 特权模式
        "true": "是，容器拥有访问主机全部权限"
      readOnlyRootFilesystem:
        "false": 否
        label: 只读 Root Filesystem
        "true": "是，容器有一个只读的文件系统"
      runAsGroup: 以群组 ID 运行
      runAsNonRoot:
        "false": 否
        label: 以非 Root 方式运行
        "true": "是，容器必须以非 root 用户的身份"
      runAsNonRootOptions:
        noOption: "否"
        yesOption: "是：容器必须以非 root 用户的身份运行。"
      runAsUser: 以用户 ID 运行
      shareProcessNamespace: 共享单一进程命名空间
      supplementalGroups: 其他组别 ID
      sysctls: Sysctls
      sysctlsKey: 名称
    standard: 标准容器
    tags: Tags
    titles:
      command: 命令
      container: 容器配置
      containers: 容器
      env: 环境变量
      events: 事件
      healthCheck: 健康检查
      image: 镜像
      networkSettings: 网络设置
      networking: 网络
      nodeScheduling: 节点调度
      podAnnotations: Pod 注释
      podLabels: Pod 标签
      podScheduling: Pod 调度
      ports: 端口映射
      resources: 资源限制和预留
      securityContext: 安全性上下文
      status: 状态
      upgrading: 扩缩容/升级策略
      volumeClaimTemplates: PVC 模板
  cronSchedule: 定时调度
  detail:
  #pods:
  #title: Pods
  detailTop:
    node: 节点
    #podIP: Pod IP
    podRestarts: Pod 重启
    workload: 工作负载
    #pods: Pods by State
    #runs: Runs
  gaugeStates:
    error: 错误
    failed: 失败
    running: 运行中
    succeeded: 成功
    #active: Active
    #transitioning: Transitioning
    warning: 警告
  hideTabs: '隐藏高级选项'
  job:
    activeDeadlineSeconds:
      label: 活动终止时间
      tip: Job 在系统试图终止它之前可能处于活动状态的持续时间。
    backoffLimit:
      label: 重试次数
      tip: 标记此 Job 失败之前的重试次数。
    completions:
      label: 完成 Job 历史数
      tip: Job 应该运行的成功完成的 Pod 数。
    failedJobsHistoryLimit:
      label: 失败 Job 历史数
      tip: 要保留的失败的已完成 Job 的数量。
    parallelism:
      label: 并发数
      tip: Job 在给定时间应同时运行的 Pod 的最大数量。
    startingDeadlineSeconds:
      label: 运行 Job 的截止时间
      tip: 如果 Job 错过了调度时间，再次尝试运行 Job 的截止时间，单位是秒
    successfulJobsHistoryLimit:
      label: 历史 Successful Job 累计数量
      tip: 保留 Successful Job 的数量
    suspend: 停止
  networking:
    dns: DNS 服务器地址和搜索域
    dnsPolicy:
      label: DNS 策略
      options:
        clusterFirst: 与配置的集群域后缀不匹配的任何 DNS 查询（例如 “www.kubernetes.io”） 都将转发到从节点继承的上游名称服务器。集群管理员可能配置了额外的存根域和上游 DNS 服务器。
        clusterFirstWithHostNet: 对于以 hostNetwork 方式运行的 Pod，应显式设置其 DNS 策略 "ClusterFirstWithHostNet"。
        default: 此设置允许 Pod 忽略 Kubernetes 环境中的 DNS 设置。Pod 会使用其 dnsConfig 字段所提供的 DNS 设置。
        none: None
      placeholder: 请选择一个 DNS 策略
    hostAliases:
      add: 添加
      keyLabel: IP 地址
      keyPlaceholder: 例如：1.1.1.1
      label: 主机别名
      tip: 使用主机别名向 Pod /etc/hosts 文件添加条目
      valueLabel: 主机名
      valuePlaceholder: "例如：foo.com, bar.com"
    hostname:
      label: 主机名
      placeholder: 例如：web
    nameservers:
      add: 添加
      label: DNS 服务器地址
      placeholder: 例如：1.1.1.1
    networkMode:
      label: 网络模式
      options:
        hostNetwork: 主机网络
        normal: 集群网络
      placeholder: 请选择网络模式
    resolver:
      add: 添加
      label: DNS 解析选项
    searches:
      add: 添加
      label: 搜索域
      placeholder: 例如：mycompany.com
    subdomain:
      label: 子域名
      placeholder: 例如：web
    vlansubnet:
      ip:
        label: IP
        placeholder: '例如: 192.168.1.100，多个 IP 用逗号连接'
      label: 扁平网络
      mac:
        label: MAC
        placeholder: '例如: 0a:00:27:00:00:00，多个 MAC 用逗号连接'
      network:
        label: Interface
        placeholder: 请选择...
      subnet:
        label: Subnet
        placeholder: 请选择一个 MacvlanSubnet
      tip: '因扁平网络使用方式限制，Pod 缩放/升级策略已改为: 先停止旧 Pod，再启动新 Pod'
  replicas: 副本
  scheduling:
    activeDeadlineSeconds: 判定 Pod 是否活跃的截止时间
    activeDeadlineSecondsTip: 系统将 Pod 判定为 failed 并杀死其关联的容器前的等待时长
    affinity:
      addNodeSelector: 添加节点选择器
      affinityOption: 亲和性
      affinityTitle: 在这些选择器匹配的节点上运行 Pod
      antiAffinityOption: 反亲和性
      antiAffinityTitle: 在不与这些选择器匹配的节点上运行 Pod
      anyNode: 自动匹配节点运行 Pods
      matchExpressions:
        addRule: 添加规则
        doesNotExist: 不存在
        exists: 存在
        #greaterThan: ">"
        in: '='
        inNamespaces: "在这些命名空间中的 Pod："
        key: 键
        #lessThan: <
        namespaces: 命名空间
        notIn: ≠
        operator: 运算符
        value: 值
        weight: 权重
      noPodRules: 没有配置 Pod 调度策略
      nodeName: 节点名称
      preferAny: "倾向于任何一种："
      preferred: 首选
      priority: 优先级
      requireAny: "需要以下任何一种："
      required: 最好
      schedulingRules: 通过调度规则匹配节点运行 Pods
      specificNode: 指定节点运行 Pods
      thisPodNamespace: 此 Pod 的命名空间
      topologyKey:
        label: 拓扑键
        placeholder: 例如：failure-domain.beta.kubernetes.io/zone
      type: 类型
    priority:
      className: 优先级名称
      priority: 优先级
    terminationGracePeriodSeconds: 终止宽限期
    terminationGracePeriodSecondsTip: 终止 Pod 运行前的宽限期
    titles:
      advanced: 高级选项
      limits: 限制和预留
      nodeScheduling: 节点调度
      nodeSelector: 具有以下标签的节点
      podScheduling: Pod 调度
      priority: 优先级
      tab: 调度
      tolerations: 容忍
    tolerations:
      addToleration: 添加
      effect: 影响
      effectOptions:
        all: 全部
        noExecute: 不执行
        noSchedule: "不调度"
        preferNoSchedule: 倾向于不调度
      labelKey: 标签键
      operator: 运算符
      operatorOptions:
        equal: =
        exists: 存在
      tolerationSeconds: 时间
      value: 值
  serviceName: 服务名称
  showTabs: '显示高级选项'
  storage:
    addClaim: 添加 pvc
    addMount: 添加
    addVolume: 添加卷
    certificate: 证书
    csi:
      cachingMode:
        label: 缓存模式
        options:
          none: 无
          readOnly: 只读
          readWrite: 读写
      diskName: 磁盘名称
      diskURI: 磁盘 URI
      drivers:
      #driver.longhorn.io: Longhorn
      fsType: 文件系统类型
      kind:
        label: 种类
        options:
          dedicated: 专用
          managed: 管理
          shared: 共用
      partition: 分区
      pdName: 持久磁盘名称
      secretName: 密文名称
      shareName: 共享名
      storagePolicyID: 存储策略 ID
      storagePolicyName: 存储策略名称
      volumeID: 卷 ID
      volumePath: 存储卷路径
    defaultMode: 默认模式
    driver: 驱动
    hostPath:
      label: 节点上的路径必须是
      options:
        blockDevice: 现有块设备
        charDevice: 现有的字符设备
        default: '任何东西：不检查目标路径'
        directory: 现有目录
        directoryOrCreate: 一个目录，如果不存在，则创建一个目录
        file: 现有文件
        fileOrCreate: 一个文件，如果它不存在，则创建一个文件
        socket: 现有 socket
    mountPoint: 容器挂载路径
    nodePath: 路径或节点
    optional:
      label: 选填项
      'no': '否'
      'yes': '是'
    path: 路径
    readOnly: 只读
    server: Server
    subPath: 卷内子路径
    subtypes:
      configMap: 配置映射
      createPVC: 创建 PVC
      #csi: CSI
      #nfs: NFS
      #awsElasticBlockStore: Amazon EBS Disk
      #azureDisk: Azure Disk
      #azureFile: Azure File
      #gcePersistentDisk: Google Persistent Disk
      #driver.longhorn.io: Longhorn
      #vsphereVolume: VMWare vSphere Volume

      hostPath: Bind-Mount
      persistentVolumeClaim: PVC
      secret: 密文
    title: '存储'
    volumeName: 卷名称
    volumePath: 卷路径
  typeDescriptions:
    apps.daemonset: DaemonSets 在每个符合条件的节点上正好运行一个 pod。当新节点被添加到集群中时，DaemonSets 会自动部署到它们身上。推荐用于全系统或可垂直扩展的工作负载，每个节点永远不需要超过一个 pod。
    apps.deployment: 部署运行分布在符合条件的节点中的可扩展数量的 pod 副本。变更会逐步推出，并可在需要时回滚到之前的版本。推荐用于无状态和水平可扩展的工作负载。
    apps.statefulset: StatefulSets 管理有状态的应用程序，并提供关于创建的 pod 的顺序和唯一性的保证。推荐用于具有持久性存储或严格身份、法定人数或升级顺序要求的工作负载。
    batch.cronjob: CronJobs 创建 Job，然后按照重复的时间表运行 Pod。该计划以标准的 Unix cron 格式表示，并使用 Kubernetes 控制平面的时区（通常是 UTC）。
    batch.job: 作业创建一个或多个 pod，通过运行一个 pod 直到成功退出，可靠地执行一次性任务。失败的 pod 会自动替换，直到达到指定的完成运行次数。作业还可以并行运行多个 pod，或作为批处理工作队列。
  upgrading:
    activeDeadlineSeconds:
      label: 判定 Pod 是否活跃的截止时间
      tip: 系统将 Pod 判定为 failed 并杀死其关联的容器前的等待时长
    concurrencyPolicy:
      label: 并发策略
      options:
        allow: 允许多个 CronJobs 同时运行
        forbid: 如果当前运行还没有结束，则跳过下一个运行
        replace: 如果当前运行还没有结束，则替换运行
    maxSurge:
      label: 最大 Pod 数量
      tip: 在任何给定时间内允许超出所需规模的最大 Pod 数量。
    maxUnavailable:
      label: 最大不可用数量
      tip: 在任何给定时间内无法使用的最大 Pod 数量。
    minReadySeconds:
      label: Minimum Ready
      tip: 在容器没有崩溃的情况下，Pod 被视为可用的最短期限。
    podManagementPolicy:
      label: Pod 管理策略
    progressDeadlineSeconds:
      label: 进程截止时间
      tip: 在标志部署失败之前，等待部署取得进展的最短期限。
    revisionHistoryLimit:
      label: 修订历史记录限制
      tip: 保留用于回滚的旧 ReplicaSets 的最大数量
    strategies:
      labels:
        delete: "删除：只有在手动删除旧 pod 时才会创建新 pod"
        recreate: "重新创建：杀死所有的 pod，然后启动新的 pod。"
        rollingUpdate: "滚动升级：创建新的 pod，直到达到 max surge，然后再删除旧 pod。停用的 pod 数量不能超过设定的最大不可用数量。"
    terminationGracePeriodSeconds:
      label: 終止宽限期
      tip: 杀死 Pod 前所需的等待时间
    title: 升级中
  validation:
    containerImage: 容器{{name} - “容器镜像 "是必需的。
    containers: 容器
workloadPorts:
  addHost: 添加主机
  addPort: 添加
  remove: 移除
drainNode:
  action: '清空'
  actionStop: '停止清空'
  deleteLocalData: 删除空目录数据
  force: 强制
  gracePeriod:
    custom: '忽略默认值，每个pod为:'
    default: 使用pod本身的默认值
    placeholder: '例如: 30'
    title: Pod终止的宽限周期
  safe:
    helpText: 如果一个节点有独立的pods或临时数据, 它将被cordon而不会被清空.
    label: 安全
  timeout:
    custom: '超时后放弃清空:'
    default: 超时后继续尝试清空
    placeholder: '例如: 60'
    title: "清空超时"
  titleMultiple: '清空{count}节点'
  titleOne: 清空{name}
grafanaDashboard:
  failedToLoad: 加载表格失败
  grafana: Grafana
  reload: 重新加载
members:
  clusterMembers: 集群成员
  clusterPermissions:
    createProjects: 创建项目
    custom:
      description: 为该用户自定义角色.
      label: 自定义
    description: 控制用户对集群的访问权限
    label: 集群权限
    manageClusterBackups: 管理集群备份
    manageClusterCatalogs: 管理集群应用商店
    manageClusterMembers: 管理集群成员
    manageNavlinks: 管理导航菜单链接
    manageNodes: 管理节点
    manageStorage: 管理存储
    member:
      description: 成员可以管理集群内的资源, 但不能改变群集本身.
      label: 成员
    noDescription: 已创建用户 - 没有描述
    owner:
      description: 所有者对集群和集群内的所有资源拥有完全的控制权.
      label: 所有者
    viewAllProjects: 查看所有项目
    viewClusterCatalogs: 查看集群应用商店
    viewClusterMembers: 查看集群成员
    viewNodes: 查看节点
  createActionLabel: 添加
membershipEditor:
  label: 成员
  role: 角色
  user: 用户
moveModal:
  description: '你正在移动下列命名空间:'
  moveButtonLabel: 移动
  targetProject: 目标项目
  title: 移动到新的项目?
project:
  containerDefaultResourceLimit: 容器默认资源限制
  haveOneOwner: 至少需要一个成员的角色为owner
  members:
    label: 成员
  psp:
    default: 集群默认
    label: Pod安全策略
  resourceQuotas: 资源配额
projectMembers:
  project:
    label: 项目
  projectPermissions:
    configmapsManage: 管理Config Maps
    configmapsView: 查看Config Maps
    createNs: 创建命名空间
    custom:
      description: 为该用户选择个别角色.
      label: 自定义
    description: 控制用户对项目的访问权限
    ingressManage: 管理Ingress
    ingressView: 查看Ingress
    label: 项目权限
    member:
      description: 成员可以管理项目内的资源，但不能改变项目本身.
      label: 成员
    monitoringUiView: 查看监控
    noDescription: 用户创建 - 没有描述
    owner:
      description: 所有者对项目和项目内的所有资源拥有完全的控制权.
      label: 所有者
    persistentvolumeclaimsManage: 管理卷
    persistentvolumeclaimsView: 查看卷
    projectcatalogsManage: 管理项目应用商店
    projectcatalogsView: 查看项目应用商店
    projectroletemplatebindingsManage: 管理项目成员
    projectroletemplatebindingsView: 查看项目成员
    readOnly:
      description: 成员只能查看项目内的资源，但不能改变资源.
      label: 只读
    searchForMember: 搜索成员以提供项目访问权限
    secretsManage: 管理密文
    secretsView: 查看密文
    serviceaccountsManage: 管理服务账户
    serviceaccountsView: 查看服务账户
    servicesManage: 管理服务
    servicesView: 查看服务
    workloadsManage: 管理工作负载
    workloadsView: 查看工作负载
projectNamespaces:
  createNamespace: 创建命名空间
  createProject: 创建项目
  label: 项目/命名空间
  noNamespaces: 没有定义的命名空间
registryConfig:
  addLabel: 添加镜像仓库
  header: 镜像仓库认证
  toolTip: 当需要从给定的镜像仓库主机名中获取镜像时, 这些信息将被镜像仓库用来验证身份并对其进行认证.
registryMirror:
  addLabel: 添加镜像
  header: 镜像
  toolTip: '镜像可以用来重定向来自一个镜像仓库的镜像请求，使其指向指定的地址列表. 例如: 你可以将docker.io指向你的内部镜像库，而不是指向互联网上的DockerHub。'
resourceQuota:
  add:
    label: 添加资源
  limitsCpu: CPU限制
  limitsMemory: 内存
  namespaceDefaultLimit:
    cpuPlaceholder: '例如: 500'
    label: 命名空间默认限制
    memoryPlaceholder: '例如: 1024'
    storagePlaceholder: '例如: 10'
    unitlessPlaceholder: '例如: 10'
  persistentVolumeClaims: 持久卷申领
  projectLimit:
    cpuPlaceholder: '例如: 2000'
    label: 项目限制
    memoryPlaceholder: '例如: 2048'
    storagePlaceholder: '例如: 50'
    unitlessPlaceholder: '例如: 50'
  requestsCpu: CPU预留
  requestsMemory: 内存预留
  requestsStorage: 存储预留
  resourceType:
    label: 资源类型
  secrets: 密文
  services: 服务
  servicesLoadBalancers: 服务负载均衡
  servicesNodePorts: 服务节点端口
v1ClusterTools:
  istio:
    description: '旧版的V1 Istio. 自Rancher 2.5.0起, Istio v1.5已被弃用.<a target="blank" href="{docsBase}/istio/#migrate-from-previous-istio-version">了解更多</a> 关于迁移至最新版本.'
    label: Istio (旧版)
  logging:
    description: '旧版的V1日志. 自Rancher 2.5.0起, V1日志已被弃用.<a target="blank" href="{docsBase}/logging/migrating/">了解更多</a>关于迁移至V2日志.'
    label: 日志 (旧版)
  monitoring:
    description: '旧版的V1监控. 自Rancher 2.5.0起, V1监控已被弃用.<a target="blank" href="{docsBase}/monitoring-alerting/guides/migrating/">了解更多</a>关于迁移至V2监控的步骤.'
    label: 监控 (旧版)
modalDownLoadFileComponent:
  title: 容器文件下载
  container: 容器
  filePath: 文件路径
  placeholder: 请输入容器中的文件路径
  notice: 下载超过 600MiB 的文件有可能导致浏览器崩溃
  validateContainer: 请选择容器
  validatePath: 请输入要下载文件的路径
  noSuchFile: 文件不存在
  serverError: 服务端发生错误
navlink:
  name:
    label: 名称
    placeholder: 请输入名称
  group:
    title: 设置为组链接
    name:
      label: 组名称
      placeholder: 请输入组名称
    sideLabel:
      label: 角标签
      placeholder: 请输入关于此链接地址的角标签
    description:
      label: 描述
      placeholder: 请输入关于此链接地址的描述
    icon:
      label: 图标
      placeholder: 请输入关于此链接地址的base64格式的图标
    label:
      label: 标签
      placeholder: 请输入关于此链接地址的标签
    uploader:
      label: 上传图标
      tooMaxError: 上传图标大小不能超过1M
      removeIcon: 删除图标
  target:
    label: 打开方式
    iframe: 使用iframe
    blank: 新窗口打开
    self: 当前窗口打开
  url:
    label: 链接地址
    placeholder: 例如：https://<RANCHER_SERVER_URL>/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/?orgId=1
    service:
      name:
        label: 服务名称
        placeholder: 请输入服务名称
      namespace:
        label: 命名空间
        placeholder: 请输入命名空间
      path:
        label: path
        placeholder: 例如：proxy/?orgId=1
      port:
        label: port
        placeholder: 例如：80
      scheme:
        label: scheme
        placeholder: 例如：http
  iframe:
    failedToLoad: 加载页面失败
    reload: 重新加载
branding:
  favicon:
    label: Favicon
    tip: '上传一个图标来替换默认的 favicon 图标，图片的宽和高应该是21像素大小. 文件最大是 20KB'
    preview: Favicon 预览
    upload: 上传 Favicon
    useCustom: 使用自定义的 Favicon
  loginLandscape:
    label: 登录页面的背景图
    tip: '上传一个图片或SVG来替换登录页面的默认背景图片. 文件最大 100KB'
    preview: 背景图预览
    upload: 上传背景图
    useCustom: 使用自定义登录页面背景图
